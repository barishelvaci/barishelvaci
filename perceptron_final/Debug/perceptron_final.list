
perceptron_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002950  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08002ad8  08002ad8  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08002ad8  08002ad8  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08002ad8  08002ad8  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ad8  08002ad8  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ad8  08002ad8  00012ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002adc  08002adc  00012adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08002ae0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020030  2**0
                  CONTENTS
 10 .bss          000003c0  20000030  20000030  00020030  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003f0  200003f0  00020030  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010fdf  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002437  00000000  00000000  0003103f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ec0  00000000  00000000  00033478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000dc8  00000000  00000000  00034338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022df1  00000000  00000000  00035100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010b32  00000000  00000000  00057ef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd8f5  00000000  00000000  00068a23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00146318  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003e9c  00000000  00000000  00146368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000030 	.word	0x20000030
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002ac0 	.word	0x08002ac0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000034 	.word	0x20000034
 80001c4:	08002ac0 	.word	0x08002ac0

080001c8 <main>:

volatile int inputs[2];
volatile int perceptronOutput;

int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  HAL_Init();
 80001cc:	f000 f992 	bl	80004f4 <HAL_Init>
  SystemClock_Config();
 80001d0:	f000 f8c4 	bl	800035c <SystemClock_Config>
  MX_GPIO_Init();
 80001d4:	f000 f8d7 	bl	8000386 <MX_GPIO_Init>
  MX_ADC1_Init();
 80001d8:	f000 f8c7 	bl	800036a <MX_ADC1_Init>
  MX_TIM3_Init();
 80001dc:	f000 f8cc 	bl	8000378 <MX_TIM3_Init>

  if (HAL_ADC_Start_IT(&hadc1) != HAL_OK)
 80001e0:	4805      	ldr	r0, [pc, #20]	; (80001f8 <main+0x30>)
 80001e2:	f000 fabf 	bl	8000764 <HAL_ADC_Start_IT>
 80001e6:	4603      	mov	r3, r0
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d001      	beq.n	80001f0 <main+0x28>
  {
    Error_Handler();
 80001ec:	f000 f8d2 	bl	8000394 <Error_Handler>
 80001f0:	2300      	movs	r3, #0
  }

}
 80001f2:	4618      	mov	r0, r3
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	2000004c 	.word	0x2000004c

080001fc <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b084      	sub	sp, #16
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
  if (hadc == &hadc1)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	4a1e      	ldr	r2, [pc, #120]	; (8000280 <HAL_ADC_ConvCpltCallback+0x84>)
 8000208:	4293      	cmp	r3, r2
 800020a:	d134      	bne.n	8000276 <HAL_ADC_ConvCpltCallback+0x7a>
  {
    HAL_ADC_Start(&hadc1);
 800020c:	481c      	ldr	r0, [pc, #112]	; (8000280 <HAL_ADC_ConvCpltCallback+0x84>)
 800020e:	f000 f9d7 	bl	80005c0 <HAL_ADC_Start>
    int adcValue1 = HAL_ADC_GetValue(&hadc1);
 8000212:	481b      	ldr	r0, [pc, #108]	; (8000280 <HAL_ADC_ConvCpltCallback+0x84>)
 8000214:	f000 fc94 	bl	8000b40 <HAL_ADC_GetValue>
 8000218:	4603      	mov	r3, r0
 800021a:	60fb      	str	r3, [r7, #12]
    HAL_ADC_Start(&hadc1);
 800021c:	4818      	ldr	r0, [pc, #96]	; (8000280 <HAL_ADC_ConvCpltCallback+0x84>)
 800021e:	f000 f9cf 	bl	80005c0 <HAL_ADC_Start>
    int adcValue2 = HAL_ADC_GetValue(&hadc1);
 8000222:	4817      	ldr	r0, [pc, #92]	; (8000280 <HAL_ADC_ConvCpltCallback+0x84>)
 8000224:	f000 fc8c 	bl	8000b40 <HAL_ADC_GetValue>
 8000228:	4603      	mov	r3, r0
 800022a:	60bb      	str	r3, [r7, #8]

    inputs[0] = adcValue1 > 2048 ? 1 : 0;
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000232:	bfcc      	ite	gt
 8000234:	2301      	movgt	r3, #1
 8000236:	2300      	movle	r3, #0
 8000238:	b2db      	uxtb	r3, r3
 800023a:	461a      	mov	r2, r3
 800023c:	4b11      	ldr	r3, [pc, #68]	; (8000284 <HAL_ADC_ConvCpltCallback+0x88>)
 800023e:	601a      	str	r2, [r3, #0]
    inputs[1] = adcValue2 > 2048 ? 1 : 0;
 8000240:	68bb      	ldr	r3, [r7, #8]
 8000242:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000246:	bfcc      	ite	gt
 8000248:	2301      	movgt	r3, #1
 800024a:	2300      	movle	r3, #0
 800024c:	b2db      	uxtb	r3, r3
 800024e:	461a      	mov	r2, r3
 8000250:	4b0c      	ldr	r3, [pc, #48]	; (8000284 <HAL_ADC_ConvCpltCallback+0x88>)
 8000252:	605a      	str	r2, [r3, #4]

    perceptronOutput = computeOutput((int*)inputs);
 8000254:	480b      	ldr	r0, [pc, #44]	; (8000284 <HAL_ADC_ConvCpltCallback+0x88>)
 8000256:	f000 f81b 	bl	8000290 <computeOutput>
 800025a:	4603      	mov	r3, r0
 800025c:	4a0a      	ldr	r2, [pc, #40]	; (8000288 <HAL_ADC_ConvCpltCallback+0x8c>)
 800025e:	6013      	str	r3, [r2, #0]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, perceptronOutput == 1 ? htim3.Init.Period : 0);
 8000260:	4b09      	ldr	r3, [pc, #36]	; (8000288 <HAL_ADC_ConvCpltCallback+0x8c>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	2b01      	cmp	r3, #1
 8000266:	d102      	bne.n	800026e <HAL_ADC_ConvCpltCallback+0x72>
 8000268:	4b08      	ldr	r3, [pc, #32]	; (800028c <HAL_ADC_ConvCpltCallback+0x90>)
 800026a:	68db      	ldr	r3, [r3, #12]
 800026c:	e000      	b.n	8000270 <HAL_ADC_ConvCpltCallback+0x74>
 800026e:	2300      	movs	r3, #0
 8000270:	4a06      	ldr	r2, [pc, #24]	; (800028c <HAL_ADC_ConvCpltCallback+0x90>)
 8000272:	6812      	ldr	r2, [r2, #0]
 8000274:	6353      	str	r3, [r2, #52]	; 0x34
  }
}
 8000276:	bf00      	nop
 8000278:	3710      	adds	r7, #16
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	2000004c 	.word	0x2000004c
 8000284:	200000dc 	.word	0x200000dc
 8000288:	200000e4 	.word	0x200000e4
 800028c:	20000094 	.word	0x20000094

08000290 <computeOutput>:

int computeOutput(int inputs[])
{
 8000290:	b480      	push	{r7}
 8000292:	b087      	sub	sp, #28
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
  int hidden_output[HIDDEN_COUNT];
  for (int i = 0; i < HIDDEN_COUNT; i++)
 8000298:	2300      	movs	r3, #0
 800029a:	617b      	str	r3, [r7, #20]
 800029c:	e02f      	b.n	80002fe <computeOutput+0x6e>
  {
    hidden_output[i] = inputs[0] * weights_hidden[i][0] + inputs[1] * weights_hidden[i][1] + bias_hidden[i] > THRESHOLD ? 1 : 0;
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	492a      	ldr	r1, [pc, #168]	; (800034c <computeOutput+0xbc>)
 80002a4:	697a      	ldr	r2, [r7, #20]
 80002a6:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 80002aa:	fb03 f202 	mul.w	r2, r3, r2
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	3304      	adds	r3, #4
 80002b2:	6819      	ldr	r1, [r3, #0]
 80002b4:	4825      	ldr	r0, [pc, #148]	; (800034c <computeOutput+0xbc>)
 80002b6:	697b      	ldr	r3, [r7, #20]
 80002b8:	00db      	lsls	r3, r3, #3
 80002ba:	4403      	add	r3, r0
 80002bc:	685b      	ldr	r3, [r3, #4]
 80002be:	fb01 f303 	mul.w	r3, r1, r3
 80002c2:	441a      	add	r2, r3
 80002c4:	4922      	ldr	r1, [pc, #136]	; (8000350 <computeOutput+0xc0>)
 80002c6:	697b      	ldr	r3, [r7, #20]
 80002c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002cc:	4413      	add	r3, r2
 80002ce:	ee07 3a90 	vmov	s15, r3
 80002d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80002d6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80002da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80002de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002e2:	bfcc      	ite	gt
 80002e4:	2301      	movgt	r3, #1
 80002e6:	2300      	movle	r3, #0
 80002e8:	b2db      	uxtb	r3, r3
 80002ea:	461a      	mov	r2, r3
 80002ec:	697b      	ldr	r3, [r7, #20]
 80002ee:	009b      	lsls	r3, r3, #2
 80002f0:	3318      	adds	r3, #24
 80002f2:	443b      	add	r3, r7
 80002f4:	f843 2c10 	str.w	r2, [r3, #-16]
  for (int i = 0; i < HIDDEN_COUNT; i++)
 80002f8:	697b      	ldr	r3, [r7, #20]
 80002fa:	3301      	adds	r3, #1
 80002fc:	617b      	str	r3, [r7, #20]
 80002fe:	697b      	ldr	r3, [r7, #20]
 8000300:	2b01      	cmp	r3, #1
 8000302:	ddcc      	ble.n	800029e <computeOutput+0xe>
  }

  int output = hidden_output[0] * weights_output[0] + hidden_output[1] * weights_output[1] + bias_output > THRESHOLD ? 1 : 0;
 8000304:	68bb      	ldr	r3, [r7, #8]
 8000306:	4a13      	ldr	r2, [pc, #76]	; (8000354 <computeOutput+0xc4>)
 8000308:	6812      	ldr	r2, [r2, #0]
 800030a:	fb03 f202 	mul.w	r2, r3, r2
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	4910      	ldr	r1, [pc, #64]	; (8000354 <computeOutput+0xc4>)
 8000312:	6849      	ldr	r1, [r1, #4]
 8000314:	fb01 f303 	mul.w	r3, r1, r3
 8000318:	441a      	add	r2, r3
 800031a:	4b0f      	ldr	r3, [pc, #60]	; (8000358 <computeOutput+0xc8>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	4413      	add	r3, r2
 8000320:	ee07 3a90 	vmov	s15, r3
 8000324:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000328:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800032c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000334:	bfcc      	ite	gt
 8000336:	2301      	movgt	r3, #1
 8000338:	2300      	movle	r3, #0
 800033a:	b2db      	uxtb	r3, r3
 800033c:	613b      	str	r3, [r7, #16]
  return output;
 800033e:	693b      	ldr	r3, [r7, #16]
}
 8000340:	4618      	mov	r0, r3
 8000342:	371c      	adds	r7, #28
 8000344:	46bd      	mov	sp, r7
 8000346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034a:	4770      	bx	lr
 800034c:	20000000 	.word	0x20000000
 8000350:	20000010 	.word	0x20000010
 8000354:	20000018 	.word	0x20000018
 8000358:	20000020 	.word	0x20000020

0800035c <SystemClock_Config>:

void SystemClock_Config(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0

}
 8000360:	bf00      	nop
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr

0800036a <MX_ADC1_Init>:

static void MX_ADC1_Init(void)
{
 800036a:	b480      	push	{r7}
 800036c:	af00      	add	r7, sp, #0

}
 800036e:	bf00      	nop
 8000370:	46bd      	mov	sp, r7
 8000372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000376:	4770      	bx	lr

08000378 <MX_TIM3_Init>:

static void MX_TIM3_Init(void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0

}
 800037c:	bf00      	nop
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr

08000386 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000386:	b480      	push	{r7}
 8000388:	af00      	add	r7, sp, #0

}
 800038a:	bf00      	nop
 800038c:	46bd      	mov	sp, r7
 800038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000392:	4770      	bx	lr

08000394 <Error_Handler>:

void Error_Handler(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
  while (1)
 8000398:	e7fe      	b.n	8000398 <Error_Handler+0x4>
	...

0800039c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003a2:	2300      	movs	r3, #0
 80003a4:	607b      	str	r3, [r7, #4]
 80003a6:	4b10      	ldr	r3, [pc, #64]	; (80003e8 <HAL_MspInit+0x4c>)
 80003a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003aa:	4a0f      	ldr	r2, [pc, #60]	; (80003e8 <HAL_MspInit+0x4c>)
 80003ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003b0:	6453      	str	r3, [r2, #68]	; 0x44
 80003b2:	4b0d      	ldr	r3, [pc, #52]	; (80003e8 <HAL_MspInit+0x4c>)
 80003b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80003ba:	607b      	str	r3, [r7, #4]
 80003bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003be:	2300      	movs	r3, #0
 80003c0:	603b      	str	r3, [r7, #0]
 80003c2:	4b09      	ldr	r3, [pc, #36]	; (80003e8 <HAL_MspInit+0x4c>)
 80003c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003c6:	4a08      	ldr	r2, [pc, #32]	; (80003e8 <HAL_MspInit+0x4c>)
 80003c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003cc:	6413      	str	r3, [r2, #64]	; 0x40
 80003ce:	4b06      	ldr	r3, [pc, #24]	; (80003e8 <HAL_MspInit+0x4c>)
 80003d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003d6:	603b      	str	r3, [r7, #0]
 80003d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80003da:	2007      	movs	r0, #7
 80003dc:	f000 fc8e 	bl	8000cfc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003e0:	bf00      	nop
 80003e2:	3708      	adds	r7, #8
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	40023800 	.word	0x40023800

080003ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003f0:	e7fe      	b.n	80003f0 <NMI_Handler+0x4>

080003f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003f2:	b480      	push	{r7}
 80003f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003f6:	e7fe      	b.n	80003f6 <HardFault_Handler+0x4>

080003f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003fc:	e7fe      	b.n	80003fc <MemManage_Handler+0x4>

080003fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003fe:	b480      	push	{r7}
 8000400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000402:	e7fe      	b.n	8000402 <BusFault_Handler+0x4>

08000404 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000408:	e7fe      	b.n	8000408 <UsageFault_Handler+0x4>

0800040a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800040a:	b480      	push	{r7}
 800040c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800040e:	bf00      	nop
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr

08000418 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800041c:	bf00      	nop
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr

08000426 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000426:	b480      	push	{r7}
 8000428:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800042a:	bf00      	nop
 800042c:	46bd      	mov	sp, r7
 800042e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000432:	4770      	bx	lr

08000434 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000438:	f000 f8ae 	bl	8000598 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800043c:	bf00      	nop
 800043e:	bd80      	pop	{r7, pc}

08000440 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000444:	4802      	ldr	r0, [pc, #8]	; (8000450 <ADC_IRQHandler+0x10>)
 8000446:	f000 fa6b 	bl	8000920 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800044a:	bf00      	nop
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	2000004c 	.word	0x2000004c

08000454 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000458:	4802      	ldr	r0, [pc, #8]	; (8000464 <TIM3_IRQHandler+0x10>)
 800045a:	f001 fdad 	bl	8001fb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800045e:	bf00      	nop
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	20000094 	.word	0x20000094

08000468 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800046c:	4802      	ldr	r0, [pc, #8]	; (8000478 <OTG_FS_IRQHandler+0x10>)
 800046e:	f000 fc78 	bl	8000d62 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000472:	bf00      	nop
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	200000ec 	.word	0x200000ec

0800047c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000480:	4b06      	ldr	r3, [pc, #24]	; (800049c <SystemInit+0x20>)
 8000482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000486:	4a05      	ldr	r2, [pc, #20]	; (800049c <SystemInit+0x20>)
 8000488:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800048c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000490:	bf00      	nop
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	e000ed00 	.word	0xe000ed00

080004a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80004a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80004a4:	480d      	ldr	r0, [pc, #52]	; (80004dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80004a6:	490e      	ldr	r1, [pc, #56]	; (80004e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80004a8:	4a0e      	ldr	r2, [pc, #56]	; (80004e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004ac:	e002      	b.n	80004b4 <LoopCopyDataInit>

080004ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004b2:	3304      	adds	r3, #4

080004b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004b8:	d3f9      	bcc.n	80004ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ba:	4a0b      	ldr	r2, [pc, #44]	; (80004e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80004bc:	4c0b      	ldr	r4, [pc, #44]	; (80004ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80004be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004c0:	e001      	b.n	80004c6 <LoopFillZerobss>

080004c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004c4:	3204      	adds	r2, #4

080004c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004c8:	d3fb      	bcc.n	80004c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80004ca:	f7ff ffd7 	bl	800047c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004ce:	f002 fad3 	bl	8002a78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004d2:	f7ff fe79 	bl	80001c8 <main>
  bx  lr    
 80004d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80004d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004e0:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 80004e4:	08002ae0 	.word	0x08002ae0
  ldr r2, =_sbss
 80004e8:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 80004ec:	200003f0 	.word	0x200003f0

080004f0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004f0:	e7fe      	b.n	80004f0 <CAN1_RX0_IRQHandler>
	...

080004f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004f8:	4b0e      	ldr	r3, [pc, #56]	; (8000534 <HAL_Init+0x40>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a0d      	ldr	r2, [pc, #52]	; (8000534 <HAL_Init+0x40>)
 80004fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000502:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000504:	4b0b      	ldr	r3, [pc, #44]	; (8000534 <HAL_Init+0x40>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a0a      	ldr	r2, [pc, #40]	; (8000534 <HAL_Init+0x40>)
 800050a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800050e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000510:	4b08      	ldr	r3, [pc, #32]	; (8000534 <HAL_Init+0x40>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a07      	ldr	r2, [pc, #28]	; (8000534 <HAL_Init+0x40>)
 8000516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800051a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800051c:	2003      	movs	r0, #3
 800051e:	f000 fbed 	bl	8000cfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000522:	2000      	movs	r0, #0
 8000524:	f000 f808 	bl	8000538 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000528:	f7ff ff38 	bl	800039c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800052c:	2300      	movs	r3, #0
}
 800052e:	4618      	mov	r0, r3
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	40023c00 	.word	0x40023c00

08000538 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000540:	4b12      	ldr	r3, [pc, #72]	; (800058c <HAL_InitTick+0x54>)
 8000542:	681a      	ldr	r2, [r3, #0]
 8000544:	4b12      	ldr	r3, [pc, #72]	; (8000590 <HAL_InitTick+0x58>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	4619      	mov	r1, r3
 800054a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800054e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000552:	fbb2 f3f3 	udiv	r3, r2, r3
 8000556:	4618      	mov	r0, r3
 8000558:	f000 fbf7 	bl	8000d4a <HAL_SYSTICK_Config>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000562:	2301      	movs	r3, #1
 8000564:	e00e      	b.n	8000584 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	2b0f      	cmp	r3, #15
 800056a:	d80a      	bhi.n	8000582 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800056c:	2200      	movs	r2, #0
 800056e:	6879      	ldr	r1, [r7, #4]
 8000570:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000574:	f000 fbcd 	bl	8000d12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000578:	4a06      	ldr	r2, [pc, #24]	; (8000594 <HAL_InitTick+0x5c>)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800057e:	2300      	movs	r3, #0
 8000580:	e000      	b.n	8000584 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000582:	2301      	movs	r3, #1
}
 8000584:	4618      	mov	r0, r3
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	20000024 	.word	0x20000024
 8000590:	2000002c 	.word	0x2000002c
 8000594:	20000028 	.word	0x20000028

08000598 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <HAL_IncTick+0x20>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	461a      	mov	r2, r3
 80005a2:	4b06      	ldr	r3, [pc, #24]	; (80005bc <HAL_IncTick+0x24>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4413      	add	r3, r2
 80005a8:	4a04      	ldr	r2, [pc, #16]	; (80005bc <HAL_IncTick+0x24>)
 80005aa:	6013      	str	r3, [r2, #0]
}
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	2000002c 	.word	0x2000002c
 80005bc:	200000e8 	.word	0x200000e8

080005c0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80005c8:	2300      	movs	r3, #0
 80005ca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d101      	bne.n	80005da <HAL_ADC_Start+0x1a>
 80005d6:	2302      	movs	r3, #2
 80005d8:	e0b2      	b.n	8000740 <HAL_ADC_Start+0x180>
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	2201      	movs	r2, #1
 80005de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	689b      	ldr	r3, [r3, #8]
 80005e8:	f003 0301 	and.w	r3, r3, #1
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d018      	beq.n	8000622 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	689a      	ldr	r2, [r3, #8]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	f042 0201 	orr.w	r2, r2, #1
 80005fe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000600:	4b52      	ldr	r3, [pc, #328]	; (800074c <HAL_ADC_Start+0x18c>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a52      	ldr	r2, [pc, #328]	; (8000750 <HAL_ADC_Start+0x190>)
 8000606:	fba2 2303 	umull	r2, r3, r2, r3
 800060a:	0c9a      	lsrs	r2, r3, #18
 800060c:	4613      	mov	r3, r2
 800060e:	005b      	lsls	r3, r3, #1
 8000610:	4413      	add	r3, r2
 8000612:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000614:	e002      	b.n	800061c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	3b01      	subs	r3, #1
 800061a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d1f9      	bne.n	8000616 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	689b      	ldr	r3, [r3, #8]
 8000628:	f003 0301 	and.w	r3, r3, #1
 800062c:	2b01      	cmp	r3, #1
 800062e:	d17a      	bne.n	8000726 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000638:	f023 0301 	bic.w	r3, r3, #1
 800063c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	685b      	ldr	r3, [r3, #4]
 800064a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800064e:	2b00      	cmp	r3, #0
 8000650:	d007      	beq.n	8000662 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000656:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800065a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000666:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800066a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800066e:	d106      	bne.n	800067e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000674:	f023 0206 	bic.w	r2, r3, #6
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	645a      	str	r2, [r3, #68]	; 0x44
 800067c:	e002      	b.n	8000684 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	2200      	movs	r2, #0
 8000682:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2200      	movs	r2, #0
 8000688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800068c:	4b31      	ldr	r3, [pc, #196]	; (8000754 <HAL_ADC_Start+0x194>)
 800068e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000698:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	685b      	ldr	r3, [r3, #4]
 800069e:	f003 031f 	and.w	r3, r3, #31
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d12a      	bne.n	80006fc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4a2b      	ldr	r2, [pc, #172]	; (8000758 <HAL_ADC_Start+0x198>)
 80006ac:	4293      	cmp	r3, r2
 80006ae:	d015      	beq.n	80006dc <HAL_ADC_Start+0x11c>
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a29      	ldr	r2, [pc, #164]	; (800075c <HAL_ADC_Start+0x19c>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d105      	bne.n	80006c6 <HAL_ADC_Start+0x106>
 80006ba:	4b26      	ldr	r3, [pc, #152]	; (8000754 <HAL_ADC_Start+0x194>)
 80006bc:	685b      	ldr	r3, [r3, #4]
 80006be:	f003 031f 	and.w	r3, r3, #31
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d00a      	beq.n	80006dc <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a25      	ldr	r2, [pc, #148]	; (8000760 <HAL_ADC_Start+0x1a0>)
 80006cc:	4293      	cmp	r3, r2
 80006ce:	d136      	bne.n	800073e <HAL_ADC_Start+0x17e>
 80006d0:	4b20      	ldr	r3, [pc, #128]	; (8000754 <HAL_ADC_Start+0x194>)
 80006d2:	685b      	ldr	r3, [r3, #4]
 80006d4:	f003 0310 	and.w	r3, r3, #16
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d130      	bne.n	800073e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	689b      	ldr	r3, [r3, #8]
 80006e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d129      	bne.n	800073e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	689a      	ldr	r2, [r3, #8]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	e020      	b.n	800073e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a15      	ldr	r2, [pc, #84]	; (8000758 <HAL_ADC_Start+0x198>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d11b      	bne.n	800073e <HAL_ADC_Start+0x17e>
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	689b      	ldr	r3, [r3, #8]
 800070c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000710:	2b00      	cmp	r3, #0
 8000712:	d114      	bne.n	800073e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	689a      	ldr	r2, [r3, #8]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	e00b      	b.n	800073e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072a:	f043 0210 	orr.w	r2, r3, #16
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000736:	f043 0201 	orr.w	r2, r3, #1
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800073e:	2300      	movs	r3, #0
}
 8000740:	4618      	mov	r0, r3
 8000742:	3714      	adds	r7, #20
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	20000024 	.word	0x20000024
 8000750:	431bde83 	.word	0x431bde83
 8000754:	40012300 	.word	0x40012300
 8000758:	40012000 	.word	0x40012000
 800075c:	40012100 	.word	0x40012100
 8000760:	40012200 	.word	0x40012200

08000764 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000764:	b480      	push	{r7}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800076c:	2300      	movs	r3, #0
 800076e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000776:	2b01      	cmp	r3, #1
 8000778:	d101      	bne.n	800077e <HAL_ADC_Start_IT+0x1a>
 800077a:	2302      	movs	r3, #2
 800077c:	e0bd      	b.n	80008fa <HAL_ADC_Start_IT+0x196>
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	2201      	movs	r2, #1
 8000782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	689b      	ldr	r3, [r3, #8]
 800078c:	f003 0301 	and.w	r3, r3, #1
 8000790:	2b01      	cmp	r3, #1
 8000792:	d018      	beq.n	80007c6 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	689a      	ldr	r2, [r3, #8]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f042 0201 	orr.w	r2, r2, #1
 80007a2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80007a4:	4b58      	ldr	r3, [pc, #352]	; (8000908 <HAL_ADC_Start_IT+0x1a4>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a58      	ldr	r2, [pc, #352]	; (800090c <HAL_ADC_Start_IT+0x1a8>)
 80007aa:	fba2 2303 	umull	r2, r3, r2, r3
 80007ae:	0c9a      	lsrs	r2, r3, #18
 80007b0:	4613      	mov	r3, r2
 80007b2:	005b      	lsls	r3, r3, #1
 80007b4:	4413      	add	r3, r2
 80007b6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80007b8:	e002      	b.n	80007c0 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	3b01      	subs	r3, #1
 80007be:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d1f9      	bne.n	80007ba <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	689b      	ldr	r3, [r3, #8]
 80007cc:	f003 0301 	and.w	r3, r3, #1
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	f040 8085 	bne.w	80008e0 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007da:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80007de:	f023 0301 	bic.w	r3, r3, #1
 80007e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d007      	beq.n	8000808 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000800:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000810:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000814:	d106      	bne.n	8000824 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081a:	f023 0206 	bic.w	r2, r3, #6
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	645a      	str	r2, [r3, #68]	; 0x44
 8000822:	e002      	b.n	800082a <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2200      	movs	r2, #0
 8000828:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2200      	movs	r2, #0
 800082e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000832:	4b37      	ldr	r3, [pc, #220]	; (8000910 <HAL_ADC_Start_IT+0x1ac>)
 8000834:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800083e:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	687a      	ldr	r2, [r7, #4]
 8000848:	6812      	ldr	r2, [r2, #0]
 800084a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800084e:	f043 0320 	orr.w	r3, r3, #32
 8000852:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	f003 031f 	and.w	r3, r3, #31
 800085c:	2b00      	cmp	r3, #0
 800085e:	d12a      	bne.n	80008b6 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a2b      	ldr	r2, [pc, #172]	; (8000914 <HAL_ADC_Start_IT+0x1b0>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d015      	beq.n	8000896 <HAL_ADC_Start_IT+0x132>
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a2a      	ldr	r2, [pc, #168]	; (8000918 <HAL_ADC_Start_IT+0x1b4>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d105      	bne.n	8000880 <HAL_ADC_Start_IT+0x11c>
 8000874:	4b26      	ldr	r3, [pc, #152]	; (8000910 <HAL_ADC_Start_IT+0x1ac>)
 8000876:	685b      	ldr	r3, [r3, #4]
 8000878:	f003 031f 	and.w	r3, r3, #31
 800087c:	2b00      	cmp	r3, #0
 800087e:	d00a      	beq.n	8000896 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a25      	ldr	r2, [pc, #148]	; (800091c <HAL_ADC_Start_IT+0x1b8>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d136      	bne.n	80008f8 <HAL_ADC_Start_IT+0x194>
 800088a:	4b21      	ldr	r3, [pc, #132]	; (8000910 <HAL_ADC_Start_IT+0x1ac>)
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	f003 0310 	and.w	r3, r3, #16
 8000892:	2b00      	cmp	r3, #0
 8000894:	d130      	bne.n	80008f8 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	689b      	ldr	r3, [r3, #8]
 800089c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d129      	bne.n	80008f8 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	689a      	ldr	r2, [r3, #8]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	e020      	b.n	80008f8 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a16      	ldr	r2, [pc, #88]	; (8000914 <HAL_ADC_Start_IT+0x1b0>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d11b      	bne.n	80008f8 <HAL_ADC_Start_IT+0x194>
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	689b      	ldr	r3, [r3, #8]
 80008c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d114      	bne.n	80008f8 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	689a      	ldr	r2, [r3, #8]
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	e00b      	b.n	80008f8 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e4:	f043 0210 	orr.w	r2, r3, #16
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f0:	f043 0201 	orr.w	r2, r3, #1
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80008f8:	2300      	movs	r3, #0
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3714      	adds	r7, #20
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	20000024 	.word	0x20000024
 800090c:	431bde83 	.word	0x431bde83
 8000910:	40012300 	.word	0x40012300
 8000914:	40012000 	.word	0x40012000
 8000918:	40012100 	.word	0x40012100
 800091c:	40012200 	.word	0x40012200

08000920 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b086      	sub	sp, #24
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
 800092c:	2300      	movs	r3, #0
 800092e:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	f003 0302 	and.w	r3, r3, #2
 8000946:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	f003 0320 	and.w	r3, r3, #32
 800094e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d049      	beq.n	80009ea <HAL_ADC_IRQHandler+0xca>
 8000956:	693b      	ldr	r3, [r7, #16]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d046      	beq.n	80009ea <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000960:	f003 0310 	and.w	r3, r3, #16
 8000964:	2b00      	cmp	r3, #0
 8000966:	d105      	bne.n	8000974 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	689b      	ldr	r3, [r3, #8]
 800097a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800097e:	2b00      	cmp	r3, #0
 8000980:	d12b      	bne.n	80009da <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000986:	2b00      	cmp	r3, #0
 8000988:	d127      	bne.n	80009da <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000990:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000994:	2b00      	cmp	r3, #0
 8000996:	d006      	beq.n	80009a6 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	689b      	ldr	r3, [r3, #8]
 800099e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d119      	bne.n	80009da <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	685a      	ldr	r2, [r3, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f022 0220 	bic.w	r2, r2, #32
 80009b4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d105      	bne.n	80009da <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d2:	f043 0201 	orr.w	r2, r3, #1
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f7ff fc0e 	bl	80001fc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f06f 0212 	mvn.w	r2, #18
 80009e8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	f003 0304 	and.w	r3, r3, #4
 80009f0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009f8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d057      	beq.n	8000ab0 <HAL_ADC_IRQHandler+0x190>
 8000a00:	693b      	ldr	r3, [r7, #16]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d054      	beq.n	8000ab0 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0a:	f003 0310 	and.w	r3, r3, #16
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d105      	bne.n	8000a1e <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	689b      	ldr	r3, [r3, #8]
 8000a24:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d139      	bne.n	8000aa0 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a32:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d006      	beq.n	8000a48 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	689b      	ldr	r3, [r3, #8]
 8000a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d12b      	bne.n	8000aa0 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d124      	bne.n	8000aa0 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	689b      	ldr	r3, [r3, #8]
 8000a5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d11d      	bne.n	8000aa0 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d119      	bne.n	8000aa0 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	685a      	ldr	r2, [r3, #4]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000a7a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a80:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d105      	bne.n	8000aa0 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a98:	f043 0201 	orr.w	r2, r3, #1
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f000 f86e 	bl	8000b82 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f06f 020c 	mvn.w	r2, #12
 8000aae:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000abe:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d017      	beq.n	8000af6 <HAL_ADC_IRQHandler+0x1d6>
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d014      	beq.n	8000af6 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d10d      	bne.n	8000af6 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ade:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f000 f837 	bl	8000b5a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f06f 0201 	mvn.w	r2, #1
 8000af4:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	f003 0320 	and.w	r3, r3, #32
 8000afc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b04:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d015      	beq.n	8000b38 <HAL_ADC_IRQHandler+0x218>
 8000b0c:	693b      	ldr	r3, [r7, #16]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d012      	beq.n	8000b38 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b16:	f043 0202 	orr.w	r2, r3, #2
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f06f 0220 	mvn.w	r2, #32
 8000b26:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	f000 f820 	bl	8000b6e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f06f 0220 	mvn.w	r2, #32
 8000b36:	601a      	str	r2, [r3, #0]
  }
}
 8000b38:	bf00      	nop
 8000b3a:	3718      	adds	r7, #24
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	b083      	sub	sp, #12
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8000b62:	bf00      	nop
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	b083      	sub	sp, #12
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000b82:	b480      	push	{r7}
 8000b84:	b083      	sub	sp, #12
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
	...

08000b98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f003 0307 	and.w	r3, r3, #7
 8000ba6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <__NVIC_SetPriorityGrouping+0x44>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bae:	68ba      	ldr	r2, [r7, #8]
 8000bb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bca:	4a04      	ldr	r2, [pc, #16]	; (8000bdc <__NVIC_SetPriorityGrouping+0x44>)
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	60d3      	str	r3, [r2, #12]
}
 8000bd0:	bf00      	nop
 8000bd2:	3714      	adds	r7, #20
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be4:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <__NVIC_GetPriorityGrouping+0x18>)
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	0a1b      	lsrs	r3, r3, #8
 8000bea:	f003 0307 	and.w	r3, r3, #7
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	6039      	str	r1, [r7, #0]
 8000c06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	db0a      	blt.n	8000c26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	490c      	ldr	r1, [pc, #48]	; (8000c48 <__NVIC_SetPriority+0x4c>)
 8000c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1a:	0112      	lsls	r2, r2, #4
 8000c1c:	b2d2      	uxtb	r2, r2
 8000c1e:	440b      	add	r3, r1
 8000c20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c24:	e00a      	b.n	8000c3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	4908      	ldr	r1, [pc, #32]	; (8000c4c <__NVIC_SetPriority+0x50>)
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	f003 030f 	and.w	r3, r3, #15
 8000c32:	3b04      	subs	r3, #4
 8000c34:	0112      	lsls	r2, r2, #4
 8000c36:	b2d2      	uxtb	r2, r2
 8000c38:	440b      	add	r3, r1
 8000c3a:	761a      	strb	r2, [r3, #24]
}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	e000e100 	.word	0xe000e100
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b089      	sub	sp, #36	; 0x24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	f003 0307 	and.w	r3, r3, #7
 8000c62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	f1c3 0307 	rsb	r3, r3, #7
 8000c6a:	2b04      	cmp	r3, #4
 8000c6c:	bf28      	it	cs
 8000c6e:	2304      	movcs	r3, #4
 8000c70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	3304      	adds	r3, #4
 8000c76:	2b06      	cmp	r3, #6
 8000c78:	d902      	bls.n	8000c80 <NVIC_EncodePriority+0x30>
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	3b03      	subs	r3, #3
 8000c7e:	e000      	b.n	8000c82 <NVIC_EncodePriority+0x32>
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	43da      	mvns	r2, r3
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	401a      	ands	r2, r3
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca2:	43d9      	mvns	r1, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca8:	4313      	orrs	r3, r2
         );
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3724      	adds	r7, #36	; 0x24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
	...

08000cb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cc8:	d301      	bcc.n	8000cce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e00f      	b.n	8000cee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cce:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <SysTick_Config+0x40>)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cd6:	210f      	movs	r1, #15
 8000cd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cdc:	f7ff ff8e 	bl	8000bfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce0:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <SysTick_Config+0x40>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce6:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <SysTick_Config+0x40>)
 8000ce8:	2207      	movs	r2, #7
 8000cea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	e000e010 	.word	0xe000e010

08000cfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f7ff ff47 	bl	8000b98 <__NVIC_SetPriorityGrouping>
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b086      	sub	sp, #24
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	4603      	mov	r3, r0
 8000d1a:	60b9      	str	r1, [r7, #8]
 8000d1c:	607a      	str	r2, [r7, #4]
 8000d1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d24:	f7ff ff5c 	bl	8000be0 <__NVIC_GetPriorityGrouping>
 8000d28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	68b9      	ldr	r1, [r7, #8]
 8000d2e:	6978      	ldr	r0, [r7, #20]
 8000d30:	f7ff ff8e 	bl	8000c50 <NVIC_EncodePriority>
 8000d34:	4602      	mov	r2, r0
 8000d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d3a:	4611      	mov	r1, r2
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ff5d 	bl	8000bfc <__NVIC_SetPriority>
}
 8000d42:	bf00      	nop
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f7ff ffb0 	bl	8000cb8 <SysTick_Config>
 8000d58:	4603      	mov	r3, r0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b086      	sub	sp, #24
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f001 fb5c 	bl	8002436 <USB_GetMode>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	f040 80f6 	bne.w	8000f72 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f001 fb40 	bl	8002410 <USB_ReadInterrupts>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f000 80ec 	beq.w	8000f70 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f001 fb37 	bl	8002410 <USB_ReadInterrupts>
 8000da2:	4603      	mov	r3, r0
 8000da4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000da8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000dac:	d104      	bne.n	8000db8 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000db6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f001 fb27 	bl	8002410 <USB_ReadInterrupts>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000dcc:	d104      	bne.n	8000dd8 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000dd6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f001 fb17 	bl	8002410 <USB_ReadInterrupts>
 8000de2:	4603      	mov	r3, r0
 8000de4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000de8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000dec:	d104      	bne.n	8000df8 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000df6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f001 fb07 	bl	8002410 <USB_ReadInterrupts>
 8000e02:	4603      	mov	r3, r0
 8000e04:	f003 0302 	and.w	r3, r3, #2
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d103      	bne.n	8000e14 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2202      	movs	r2, #2
 8000e12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f001 faf9 	bl	8002410 <USB_ReadInterrupts>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000e24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000e28:	d11c      	bne.n	8000e64 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000e32:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f003 0301 	and.w	r3, r3, #1
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d10f      	bne.n	8000e64 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8000e44:	2110      	movs	r1, #16
 8000e46:	6938      	ldr	r0, [r7, #16]
 8000e48:	f001 fa26 	bl	8002298 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8000e4c:	6938      	ldr	r0, [r7, #16]
 8000e4e:	f001 fa57 	bl	8002300 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2101      	movs	r1, #1
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f001 fafa 	bl	8002452 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f001 fd8b 	bl	800297a <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f001 fad1 	bl	8002410 <USB_ReadInterrupts>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e78:	d102      	bne.n	8000e80 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f001 f829 	bl	8001ed2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f001 fac3 	bl	8002410 <USB_ReadInterrupts>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	f003 0308 	and.w	r3, r3, #8
 8000e90:	2b08      	cmp	r3, #8
 8000e92:	d106      	bne.n	8000ea2 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f001 fd54 	bl	8002942 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2208      	movs	r2, #8
 8000ea0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f001 fab2 	bl	8002410 <USB_ReadInterrupts>
 8000eac:	4603      	mov	r3, r0
 8000eae:	f003 0310 	and.w	r3, r3, #16
 8000eb2:	2b10      	cmp	r3, #16
 8000eb4:	d101      	bne.n	8000eba <HAL_HCD_IRQHandler+0x158>
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e000      	b.n	8000ebc <HAL_HCD_IRQHandler+0x15a>
 8000eba:	2300      	movs	r3, #0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d012      	beq.n	8000ee6 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	699a      	ldr	r2, [r3, #24]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f022 0210 	bic.w	r2, r2, #16
 8000ece:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f000 ff2c 	bl	8001d2e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	699a      	ldr	r2, [r3, #24]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f042 0210 	orr.w	r2, r2, #16
 8000ee4:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f001 fa90 	bl	8002410 <USB_ReadInterrupts>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ef6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000efa:	d13a      	bne.n	8000f72 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f001 fae0 	bl	80024c6 <USB_HC_ReadInterrupt>
 8000f06:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000f08:	2300      	movs	r3, #0
 8000f0a:	617b      	str	r3, [r7, #20]
 8000f0c:	e025      	b.n	8000f5a <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	f003 030f 	and.w	r3, r3, #15
 8000f14:	68ba      	ldr	r2, [r7, #8]
 8000f16:	fa22 f303 	lsr.w	r3, r2, r3
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d018      	beq.n	8000f54 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	015a      	lsls	r2, r3, #5
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	4413      	add	r3, r2
 8000f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f38:	d106      	bne.n	8000f48 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	4619      	mov	r1, r3
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f000 f836 	bl	8000fb2 <HCD_HC_IN_IRQHandler>
 8000f46:	e005      	b.n	8000f54 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f000 fb84 	bl	800165c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	3301      	adds	r3, #1
 8000f58:	617b      	str	r3, [r7, #20]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	697a      	ldr	r2, [r7, #20]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d3d4      	bcc.n	8000f0e <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000f6c:	615a      	str	r2, [r3, #20]
 8000f6e:	e000      	b.n	8000f72 <HAL_HCD_IRQHandler+0x210>
      return;
 8000f70:	bf00      	nop
    }
  }
}
 8000f72:	3718      	adds	r7, #24
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d101      	bne.n	8000f8e <HAL_HCD_Stop+0x16>
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	e00d      	b.n	8000faa <HAL_HCD_Stop+0x32>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2201      	movs	r2, #1
 8000f92:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f001 fba0 	bl	80026e0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b086      	sub	sp, #24
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
 8000fba:	460b      	mov	r3, r1
 8000fbc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8000fc8:	78fb      	ldrb	r3, [r7, #3]
 8000fca:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	015a      	lsls	r2, r3, #5
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	f003 0304 	and.w	r3, r3, #4
 8000fde:	2b04      	cmp	r3, #4
 8000fe0:	d11a      	bne.n	8001018 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	015a      	lsls	r2, r3, #5
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	4413      	add	r3, r2
 8000fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000fee:	461a      	mov	r2, r3
 8000ff0:	2304      	movs	r3, #4
 8000ff2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	212c      	movs	r1, #44	; 0x2c
 8000ffa:	fb01 f303 	mul.w	r3, r1, r3
 8000ffe:	4413      	add	r3, r2
 8001000:	3361      	adds	r3, #97	; 0x61
 8001002:	2206      	movs	r2, #6
 8001004:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	68fa      	ldr	r2, [r7, #12]
 800100c:	b2d2      	uxtb	r2, r2
 800100e:	4611      	mov	r1, r2
 8001010:	4618      	mov	r0, r3
 8001012:	f001 fa69 	bl	80024e8 <USB_HC_Halt>
 8001016:	e0af      	b.n	8001178 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	015a      	lsls	r2, r3, #5
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	4413      	add	r3, r2
 8001020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800102a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800102e:	d11b      	bne.n	8001068 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	015a      	lsls	r2, r3, #5
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	4413      	add	r3, r2
 8001038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800103c:	461a      	mov	r2, r3
 800103e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001042:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	212c      	movs	r1, #44	; 0x2c
 800104a:	fb01 f303 	mul.w	r3, r1, r3
 800104e:	4413      	add	r3, r2
 8001050:	3361      	adds	r3, #97	; 0x61
 8001052:	2207      	movs	r2, #7
 8001054:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	b2d2      	uxtb	r2, r2
 800105e:	4611      	mov	r1, r2
 8001060:	4618      	mov	r0, r3
 8001062:	f001 fa41 	bl	80024e8 <USB_HC_Halt>
 8001066:	e087      	b.n	8001178 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	015a      	lsls	r2, r3, #5
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	4413      	add	r3, r2
 8001070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	f003 0320 	and.w	r3, r3, #32
 800107a:	2b20      	cmp	r3, #32
 800107c:	d109      	bne.n	8001092 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	015a      	lsls	r2, r3, #5
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	4413      	add	r3, r2
 8001086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800108a:	461a      	mov	r2, r3
 800108c:	2320      	movs	r3, #32
 800108e:	6093      	str	r3, [r2, #8]
 8001090:	e072      	b.n	8001178 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	015a      	lsls	r2, r3, #5
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	4413      	add	r3, r2
 800109a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	f003 0308 	and.w	r3, r3, #8
 80010a4:	2b08      	cmp	r3, #8
 80010a6:	d11a      	bne.n	80010de <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	015a      	lsls	r2, r3, #5
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	4413      	add	r3, r2
 80010b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80010b4:	461a      	mov	r2, r3
 80010b6:	2308      	movs	r3, #8
 80010b8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	212c      	movs	r1, #44	; 0x2c
 80010c0:	fb01 f303 	mul.w	r3, r1, r3
 80010c4:	4413      	add	r3, r2
 80010c6:	3361      	adds	r3, #97	; 0x61
 80010c8:	2205      	movs	r2, #5
 80010ca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	68fa      	ldr	r2, [r7, #12]
 80010d2:	b2d2      	uxtb	r2, r2
 80010d4:	4611      	mov	r1, r2
 80010d6:	4618      	mov	r0, r3
 80010d8:	f001 fa06 	bl	80024e8 <USB_HC_Halt>
 80010dc:	e04c      	b.n	8001178 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	015a      	lsls	r2, r3, #5
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	4413      	add	r3, r2
 80010e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010f4:	d11b      	bne.n	800112e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	015a      	lsls	r2, r3, #5
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	4413      	add	r3, r2
 80010fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001102:	461a      	mov	r2, r3
 8001104:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001108:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	212c      	movs	r1, #44	; 0x2c
 8001110:	fb01 f303 	mul.w	r3, r1, r3
 8001114:	4413      	add	r3, r2
 8001116:	3361      	adds	r3, #97	; 0x61
 8001118:	2208      	movs	r2, #8
 800111a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	68fa      	ldr	r2, [r7, #12]
 8001122:	b2d2      	uxtb	r2, r2
 8001124:	4611      	mov	r1, r2
 8001126:	4618      	mov	r0, r3
 8001128:	f001 f9de 	bl	80024e8 <USB_HC_Halt>
 800112c:	e024      	b.n	8001178 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	015a      	lsls	r2, r3, #5
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	4413      	add	r3, r2
 8001136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001140:	2b80      	cmp	r3, #128	; 0x80
 8001142:	d119      	bne.n	8001178 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	015a      	lsls	r2, r3, #5
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	4413      	add	r3, r2
 800114c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001150:	461a      	mov	r2, r3
 8001152:	2380      	movs	r3, #128	; 0x80
 8001154:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	212c      	movs	r1, #44	; 0x2c
 800115c:	fb01 f303 	mul.w	r3, r1, r3
 8001160:	4413      	add	r3, r2
 8001162:	3361      	adds	r3, #97	; 0x61
 8001164:	2206      	movs	r2, #6
 8001166:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	68fa      	ldr	r2, [r7, #12]
 800116e:	b2d2      	uxtb	r2, r2
 8001170:	4611      	mov	r1, r2
 8001172:	4618      	mov	r0, r3
 8001174:	f001 f9b8 	bl	80024e8 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	015a      	lsls	r2, r3, #5
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	4413      	add	r3, r2
 8001180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800118a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800118e:	d112      	bne.n	80011b6 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	68fa      	ldr	r2, [r7, #12]
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	4611      	mov	r1, r2
 800119a:	4618      	mov	r0, r3
 800119c:	f001 f9a4 	bl	80024e8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	015a      	lsls	r2, r3, #5
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	4413      	add	r3, r2
 80011a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80011ac:	461a      	mov	r2, r3
 80011ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011b2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80011b4:	e24e      	b.n	8001654 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	015a      	lsls	r2, r3, #5
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	4413      	add	r3, r2
 80011be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	f040 80df 	bne.w	800138c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	691b      	ldr	r3, [r3, #16]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d019      	beq.n	800120a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	212c      	movs	r1, #44	; 0x2c
 80011dc:	fb01 f303 	mul.w	r3, r1, r3
 80011e0:	4413      	add	r3, r2
 80011e2:	3348      	adds	r3, #72	; 0x48
 80011e4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	0159      	lsls	r1, r3, #5
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	440b      	add	r3, r1
 80011ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80011f2:	691b      	ldr	r3, [r3, #16]
 80011f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80011f8:	1ad2      	subs	r2, r2, r3
 80011fa:	6879      	ldr	r1, [r7, #4]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	202c      	movs	r0, #44	; 0x2c
 8001200:	fb00 f303 	mul.w	r3, r0, r3
 8001204:	440b      	add	r3, r1
 8001206:	3350      	adds	r3, #80	; 0x50
 8001208:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	212c      	movs	r1, #44	; 0x2c
 8001210:	fb01 f303 	mul.w	r3, r1, r3
 8001214:	4413      	add	r3, r2
 8001216:	3361      	adds	r3, #97	; 0x61
 8001218:	2201      	movs	r2, #1
 800121a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	212c      	movs	r1, #44	; 0x2c
 8001222:	fb01 f303 	mul.w	r3, r1, r3
 8001226:	4413      	add	r3, r2
 8001228:	335c      	adds	r3, #92	; 0x5c
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	015a      	lsls	r2, r3, #5
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	4413      	add	r3, r2
 8001236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800123a:	461a      	mov	r2, r3
 800123c:	2301      	movs	r3, #1
 800123e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	212c      	movs	r1, #44	; 0x2c
 8001246:	fb01 f303 	mul.w	r3, r1, r3
 800124a:	4413      	add	r3, r2
 800124c:	333f      	adds	r3, #63	; 0x3f
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d009      	beq.n	8001268 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	212c      	movs	r1, #44	; 0x2c
 800125a:	fb01 f303 	mul.w	r3, r1, r3
 800125e:	4413      	add	r3, r2
 8001260:	333f      	adds	r3, #63	; 0x3f
 8001262:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001264:	2b02      	cmp	r3, #2
 8001266:	d111      	bne.n	800128c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	68fa      	ldr	r2, [r7, #12]
 800126e:	b2d2      	uxtb	r2, r2
 8001270:	4611      	mov	r1, r2
 8001272:	4618      	mov	r0, r3
 8001274:	f001 f938 	bl	80024e8 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	015a      	lsls	r2, r3, #5
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	4413      	add	r3, r2
 8001280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001284:	461a      	mov	r2, r3
 8001286:	2310      	movs	r3, #16
 8001288:	6093      	str	r3, [r2, #8]
 800128a:	e03a      	b.n	8001302 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	212c      	movs	r1, #44	; 0x2c
 8001292:	fb01 f303 	mul.w	r3, r1, r3
 8001296:	4413      	add	r3, r2
 8001298:	333f      	adds	r3, #63	; 0x3f
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b03      	cmp	r3, #3
 800129e:	d009      	beq.n	80012b4 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	212c      	movs	r1, #44	; 0x2c
 80012a6:	fb01 f303 	mul.w	r3, r1, r3
 80012aa:	4413      	add	r3, r2
 80012ac:	333f      	adds	r3, #63	; 0x3f
 80012ae:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d126      	bne.n	8001302 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	015a      	lsls	r2, r3, #5
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	4413      	add	r3, r2
 80012bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	0151      	lsls	r1, r2, #5
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	440a      	add	r2, r1
 80012ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80012ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80012d2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	212c      	movs	r1, #44	; 0x2c
 80012da:	fb01 f303 	mul.w	r3, r1, r3
 80012de:	4413      	add	r3, r2
 80012e0:	3360      	adds	r3, #96	; 0x60
 80012e2:	2201      	movs	r2, #1
 80012e4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	b2d9      	uxtb	r1, r3
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	202c      	movs	r0, #44	; 0x2c
 80012f0:	fb00 f303 	mul.w	r3, r0, r3
 80012f4:	4413      	add	r3, r2
 80012f6:	3360      	adds	r3, #96	; 0x60
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	461a      	mov	r2, r3
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f001 fb4a 	bl	8002996 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	691b      	ldr	r3, [r3, #16]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d12b      	bne.n	8001362 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	212c      	movs	r1, #44	; 0x2c
 8001310:	fb01 f303 	mul.w	r3, r1, r3
 8001314:	4413      	add	r3, r2
 8001316:	3348      	adds	r3, #72	; 0x48
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	6879      	ldr	r1, [r7, #4]
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	202c      	movs	r0, #44	; 0x2c
 8001320:	fb00 f202 	mul.w	r2, r0, r2
 8001324:	440a      	add	r2, r1
 8001326:	3240      	adds	r2, #64	; 0x40
 8001328:	8812      	ldrh	r2, [r2, #0]
 800132a:	fbb3 f3f2 	udiv	r3, r3, r2
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	2b00      	cmp	r3, #0
 8001334:	f000 818e 	beq.w	8001654 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	212c      	movs	r1, #44	; 0x2c
 800133e:	fb01 f303 	mul.w	r3, r1, r3
 8001342:	4413      	add	r3, r2
 8001344:	3354      	adds	r3, #84	; 0x54
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	f083 0301 	eor.w	r3, r3, #1
 800134c:	b2d8      	uxtb	r0, r3
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	212c      	movs	r1, #44	; 0x2c
 8001354:	fb01 f303 	mul.w	r3, r1, r3
 8001358:	4413      	add	r3, r2
 800135a:	3354      	adds	r3, #84	; 0x54
 800135c:	4602      	mov	r2, r0
 800135e:	701a      	strb	r2, [r3, #0]
}
 8001360:	e178      	b.n	8001654 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	212c      	movs	r1, #44	; 0x2c
 8001368:	fb01 f303 	mul.w	r3, r1, r3
 800136c:	4413      	add	r3, r2
 800136e:	3354      	adds	r3, #84	; 0x54
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	f083 0301 	eor.w	r3, r3, #1
 8001376:	b2d8      	uxtb	r0, r3
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	212c      	movs	r1, #44	; 0x2c
 800137e:	fb01 f303 	mul.w	r3, r1, r3
 8001382:	4413      	add	r3, r2
 8001384:	3354      	adds	r3, #84	; 0x54
 8001386:	4602      	mov	r2, r0
 8001388:	701a      	strb	r2, [r3, #0]
}
 800138a:	e163      	b.n	8001654 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	015a      	lsls	r2, r3, #5
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	4413      	add	r3, r2
 8001394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	2b02      	cmp	r3, #2
 80013a0:	f040 80f6 	bne.w	8001590 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	212c      	movs	r1, #44	; 0x2c
 80013aa:	fb01 f303 	mul.w	r3, r1, r3
 80013ae:	4413      	add	r3, r2
 80013b0:	3361      	adds	r3, #97	; 0x61
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d109      	bne.n	80013cc <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	212c      	movs	r1, #44	; 0x2c
 80013be:	fb01 f303 	mul.w	r3, r1, r3
 80013c2:	4413      	add	r3, r2
 80013c4:	3360      	adds	r3, #96	; 0x60
 80013c6:	2201      	movs	r2, #1
 80013c8:	701a      	strb	r2, [r3, #0]
 80013ca:	e0c9      	b.n	8001560 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	212c      	movs	r1, #44	; 0x2c
 80013d2:	fb01 f303 	mul.w	r3, r1, r3
 80013d6:	4413      	add	r3, r2
 80013d8:	3361      	adds	r3, #97	; 0x61
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b05      	cmp	r3, #5
 80013de:	d109      	bne.n	80013f4 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	212c      	movs	r1, #44	; 0x2c
 80013e6:	fb01 f303 	mul.w	r3, r1, r3
 80013ea:	4413      	add	r3, r2
 80013ec:	3360      	adds	r3, #96	; 0x60
 80013ee:	2205      	movs	r2, #5
 80013f0:	701a      	strb	r2, [r3, #0]
 80013f2:	e0b5      	b.n	8001560 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	212c      	movs	r1, #44	; 0x2c
 80013fa:	fb01 f303 	mul.w	r3, r1, r3
 80013fe:	4413      	add	r3, r2
 8001400:	3361      	adds	r3, #97	; 0x61
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b06      	cmp	r3, #6
 8001406:	d009      	beq.n	800141c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	212c      	movs	r1, #44	; 0x2c
 800140e:	fb01 f303 	mul.w	r3, r1, r3
 8001412:	4413      	add	r3, r2
 8001414:	3361      	adds	r3, #97	; 0x61
 8001416:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001418:	2b08      	cmp	r3, #8
 800141a:	d150      	bne.n	80014be <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	212c      	movs	r1, #44	; 0x2c
 8001422:	fb01 f303 	mul.w	r3, r1, r3
 8001426:	4413      	add	r3, r2
 8001428:	335c      	adds	r3, #92	; 0x5c
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	1c5a      	adds	r2, r3, #1
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	202c      	movs	r0, #44	; 0x2c
 8001434:	fb00 f303 	mul.w	r3, r0, r3
 8001438:	440b      	add	r3, r1
 800143a:	335c      	adds	r3, #92	; 0x5c
 800143c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	212c      	movs	r1, #44	; 0x2c
 8001444:	fb01 f303 	mul.w	r3, r1, r3
 8001448:	4413      	add	r3, r2
 800144a:	335c      	adds	r3, #92	; 0x5c
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2b02      	cmp	r3, #2
 8001450:	d912      	bls.n	8001478 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	212c      	movs	r1, #44	; 0x2c
 8001458:	fb01 f303 	mul.w	r3, r1, r3
 800145c:	4413      	add	r3, r2
 800145e:	335c      	adds	r3, #92	; 0x5c
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	212c      	movs	r1, #44	; 0x2c
 800146a:	fb01 f303 	mul.w	r3, r1, r3
 800146e:	4413      	add	r3, r2
 8001470:	3360      	adds	r3, #96	; 0x60
 8001472:	2204      	movs	r2, #4
 8001474:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001476:	e073      	b.n	8001560 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	212c      	movs	r1, #44	; 0x2c
 800147e:	fb01 f303 	mul.w	r3, r1, r3
 8001482:	4413      	add	r3, r2
 8001484:	3360      	adds	r3, #96	; 0x60
 8001486:	2202      	movs	r2, #2
 8001488:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	015a      	lsls	r2, r3, #5
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	4413      	add	r3, r2
 8001492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80014a0:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80014a8:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	015a      	lsls	r2, r3, #5
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	4413      	add	r3, r2
 80014b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014b6:	461a      	mov	r2, r3
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80014bc:	e050      	b.n	8001560 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	212c      	movs	r1, #44	; 0x2c
 80014c4:	fb01 f303 	mul.w	r3, r1, r3
 80014c8:	4413      	add	r3, r2
 80014ca:	3361      	adds	r3, #97	; 0x61
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	2b03      	cmp	r3, #3
 80014d0:	d122      	bne.n	8001518 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	212c      	movs	r1, #44	; 0x2c
 80014d8:	fb01 f303 	mul.w	r3, r1, r3
 80014dc:	4413      	add	r3, r2
 80014de:	3360      	adds	r3, #96	; 0x60
 80014e0:	2202      	movs	r2, #2
 80014e2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	015a      	lsls	r2, r3, #5
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	4413      	add	r3, r2
 80014ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80014fa:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001502:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	015a      	lsls	r2, r3, #5
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	4413      	add	r3, r2
 800150c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001510:	461a      	mov	r2, r3
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	6013      	str	r3, [r2, #0]
 8001516:	e023      	b.n	8001560 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	212c      	movs	r1, #44	; 0x2c
 800151e:	fb01 f303 	mul.w	r3, r1, r3
 8001522:	4413      	add	r3, r2
 8001524:	3361      	adds	r3, #97	; 0x61
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b07      	cmp	r3, #7
 800152a:	d119      	bne.n	8001560 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	212c      	movs	r1, #44	; 0x2c
 8001532:	fb01 f303 	mul.w	r3, r1, r3
 8001536:	4413      	add	r3, r2
 8001538:	335c      	adds	r3, #92	; 0x5c
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	1c5a      	adds	r2, r3, #1
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	202c      	movs	r0, #44	; 0x2c
 8001544:	fb00 f303 	mul.w	r3, r0, r3
 8001548:	440b      	add	r3, r1
 800154a:	335c      	adds	r3, #92	; 0x5c
 800154c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	212c      	movs	r1, #44	; 0x2c
 8001554:	fb01 f303 	mul.w	r3, r1, r3
 8001558:	4413      	add	r3, r2
 800155a:	3360      	adds	r3, #96	; 0x60
 800155c:	2204      	movs	r2, #4
 800155e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	015a      	lsls	r2, r3, #5
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	4413      	add	r3, r2
 8001568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800156c:	461a      	mov	r2, r3
 800156e:	2302      	movs	r3, #2
 8001570:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	b2d9      	uxtb	r1, r3
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	202c      	movs	r0, #44	; 0x2c
 800157c:	fb00 f303 	mul.w	r3, r0, r3
 8001580:	4413      	add	r3, r2
 8001582:	3360      	adds	r3, #96	; 0x60
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	461a      	mov	r2, r3
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f001 fa04 	bl	8002996 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800158e:	e061      	b.n	8001654 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	015a      	lsls	r2, r3, #5
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	4413      	add	r3, r2
 8001598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f003 0310 	and.w	r3, r3, #16
 80015a2:	2b10      	cmp	r3, #16
 80015a4:	d156      	bne.n	8001654 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	212c      	movs	r1, #44	; 0x2c
 80015ac:	fb01 f303 	mul.w	r3, r1, r3
 80015b0:	4413      	add	r3, r2
 80015b2:	333f      	adds	r3, #63	; 0x3f
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b03      	cmp	r3, #3
 80015b8:	d111      	bne.n	80015de <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	212c      	movs	r1, #44	; 0x2c
 80015c0:	fb01 f303 	mul.w	r3, r1, r3
 80015c4:	4413      	add	r3, r2
 80015c6:	335c      	adds	r3, #92	; 0x5c
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	68fa      	ldr	r2, [r7, #12]
 80015d2:	b2d2      	uxtb	r2, r2
 80015d4:	4611      	mov	r1, r2
 80015d6:	4618      	mov	r0, r3
 80015d8:	f000 ff86 	bl	80024e8 <USB_HC_Halt>
 80015dc:	e031      	b.n	8001642 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	212c      	movs	r1, #44	; 0x2c
 80015e4:	fb01 f303 	mul.w	r3, r1, r3
 80015e8:	4413      	add	r3, r2
 80015ea:	333f      	adds	r3, #63	; 0x3f
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d009      	beq.n	8001606 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	212c      	movs	r1, #44	; 0x2c
 80015f8:	fb01 f303 	mul.w	r3, r1, r3
 80015fc:	4413      	add	r3, r2
 80015fe:	333f      	adds	r3, #63	; 0x3f
 8001600:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001602:	2b02      	cmp	r3, #2
 8001604:	d11d      	bne.n	8001642 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	212c      	movs	r1, #44	; 0x2c
 800160c:	fb01 f303 	mul.w	r3, r1, r3
 8001610:	4413      	add	r3, r2
 8001612:	335c      	adds	r3, #92	; 0x5c
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d110      	bne.n	8001642 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	212c      	movs	r1, #44	; 0x2c
 8001626:	fb01 f303 	mul.w	r3, r1, r3
 800162a:	4413      	add	r3, r2
 800162c:	3361      	adds	r3, #97	; 0x61
 800162e:	2203      	movs	r2, #3
 8001630:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	68fa      	ldr	r2, [r7, #12]
 8001638:	b2d2      	uxtb	r2, r2
 800163a:	4611      	mov	r1, r2
 800163c:	4618      	mov	r0, r3
 800163e:	f000 ff53 	bl	80024e8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	015a      	lsls	r2, r3, #5
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	4413      	add	r3, r2
 800164a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800164e:	461a      	mov	r2, r3
 8001650:	2310      	movs	r3, #16
 8001652:	6093      	str	r3, [r2, #8]
}
 8001654:	bf00      	nop
 8001656:	3718      	adds	r7, #24
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b088      	sub	sp, #32
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	460b      	mov	r3, r1
 8001666:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8001672:	78fb      	ldrb	r3, [r7, #3]
 8001674:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	015a      	lsls	r2, r3, #5
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	4413      	add	r3, r2
 800167e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	2b04      	cmp	r3, #4
 800168a:	d11a      	bne.n	80016c2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	015a      	lsls	r2, r3, #5
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	4413      	add	r3, r2
 8001694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001698:	461a      	mov	r2, r3
 800169a:	2304      	movs	r3, #4
 800169c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	212c      	movs	r1, #44	; 0x2c
 80016a4:	fb01 f303 	mul.w	r3, r1, r3
 80016a8:	4413      	add	r3, r2
 80016aa:	3361      	adds	r3, #97	; 0x61
 80016ac:	2206      	movs	r2, #6
 80016ae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	697a      	ldr	r2, [r7, #20]
 80016b6:	b2d2      	uxtb	r2, r2
 80016b8:	4611      	mov	r1, r2
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 ff14 	bl	80024e8 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80016c0:	e331      	b.n	8001d26 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	015a      	lsls	r2, r3, #5
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	4413      	add	r3, r2
 80016ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f003 0320 	and.w	r3, r3, #32
 80016d4:	2b20      	cmp	r3, #32
 80016d6:	d12e      	bne.n	8001736 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	015a      	lsls	r2, r3, #5
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	4413      	add	r3, r2
 80016e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016e4:	461a      	mov	r2, r3
 80016e6:	2320      	movs	r3, #32
 80016e8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	212c      	movs	r1, #44	; 0x2c
 80016f0:	fb01 f303 	mul.w	r3, r1, r3
 80016f4:	4413      	add	r3, r2
 80016f6:	333d      	adds	r3, #61	; 0x3d
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	f040 8313 	bne.w	8001d26 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	212c      	movs	r1, #44	; 0x2c
 8001706:	fb01 f303 	mul.w	r3, r1, r3
 800170a:	4413      	add	r3, r2
 800170c:	333d      	adds	r3, #61	; 0x3d
 800170e:	2200      	movs	r2, #0
 8001710:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	212c      	movs	r1, #44	; 0x2c
 8001718:	fb01 f303 	mul.w	r3, r1, r3
 800171c:	4413      	add	r3, r2
 800171e:	3360      	adds	r3, #96	; 0x60
 8001720:	2202      	movs	r2, #2
 8001722:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	697a      	ldr	r2, [r7, #20]
 800172a:	b2d2      	uxtb	r2, r2
 800172c:	4611      	mov	r1, r2
 800172e:	4618      	mov	r0, r3
 8001730:	f000 feda 	bl	80024e8 <USB_HC_Halt>
}
 8001734:	e2f7      	b.n	8001d26 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	015a      	lsls	r2, r3, #5
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	4413      	add	r3, r2
 800173e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001748:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800174c:	d112      	bne.n	8001774 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	015a      	lsls	r2, r3, #5
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	4413      	add	r3, r2
 8001756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800175a:	461a      	mov	r2, r3
 800175c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001760:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	697a      	ldr	r2, [r7, #20]
 8001768:	b2d2      	uxtb	r2, r2
 800176a:	4611      	mov	r1, r2
 800176c:	4618      	mov	r0, r3
 800176e:	f000 febb 	bl	80024e8 <USB_HC_Halt>
}
 8001772:	e2d8      	b.n	8001d26 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	015a      	lsls	r2, r3, #5
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	4413      	add	r3, r2
 800177c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	2b01      	cmp	r3, #1
 8001788:	d140      	bne.n	800180c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	212c      	movs	r1, #44	; 0x2c
 8001790:	fb01 f303 	mul.w	r3, r1, r3
 8001794:	4413      	add	r3, r2
 8001796:	335c      	adds	r3, #92	; 0x5c
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	015a      	lsls	r2, r3, #5
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	4413      	add	r3, r2
 80017a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017ae:	2b40      	cmp	r3, #64	; 0x40
 80017b0:	d111      	bne.n	80017d6 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	212c      	movs	r1, #44	; 0x2c
 80017b8:	fb01 f303 	mul.w	r3, r1, r3
 80017bc:	4413      	add	r3, r2
 80017be:	333d      	adds	r3, #61	; 0x3d
 80017c0:	2201      	movs	r2, #1
 80017c2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	015a      	lsls	r2, r3, #5
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	4413      	add	r3, r2
 80017cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017d0:	461a      	mov	r2, r3
 80017d2:	2340      	movs	r3, #64	; 0x40
 80017d4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	015a      	lsls	r2, r3, #5
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	4413      	add	r3, r2
 80017de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017e2:	461a      	mov	r2, r3
 80017e4:	2301      	movs	r3, #1
 80017e6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	212c      	movs	r1, #44	; 0x2c
 80017ee:	fb01 f303 	mul.w	r3, r1, r3
 80017f2:	4413      	add	r3, r2
 80017f4:	3361      	adds	r3, #97	; 0x61
 80017f6:	2201      	movs	r2, #1
 80017f8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	697a      	ldr	r2, [r7, #20]
 8001800:	b2d2      	uxtb	r2, r2
 8001802:	4611      	mov	r1, r2
 8001804:	4618      	mov	r0, r3
 8001806:	f000 fe6f 	bl	80024e8 <USB_HC_Halt>
}
 800180a:	e28c      	b.n	8001d26 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	015a      	lsls	r2, r3, #5
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	4413      	add	r3, r2
 8001814:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800181e:	2b40      	cmp	r3, #64	; 0x40
 8001820:	d12c      	bne.n	800187c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	212c      	movs	r1, #44	; 0x2c
 8001828:	fb01 f303 	mul.w	r3, r1, r3
 800182c:	4413      	add	r3, r2
 800182e:	3361      	adds	r3, #97	; 0x61
 8001830:	2204      	movs	r2, #4
 8001832:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	212c      	movs	r1, #44	; 0x2c
 800183a:	fb01 f303 	mul.w	r3, r1, r3
 800183e:	4413      	add	r3, r2
 8001840:	333d      	adds	r3, #61	; 0x3d
 8001842:	2201      	movs	r2, #1
 8001844:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	212c      	movs	r1, #44	; 0x2c
 800184c:	fb01 f303 	mul.w	r3, r1, r3
 8001850:	4413      	add	r3, r2
 8001852:	335c      	adds	r3, #92	; 0x5c
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	697a      	ldr	r2, [r7, #20]
 800185e:	b2d2      	uxtb	r2, r2
 8001860:	4611      	mov	r1, r2
 8001862:	4618      	mov	r0, r3
 8001864:	f000 fe40 	bl	80024e8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	015a      	lsls	r2, r3, #5
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	4413      	add	r3, r2
 8001870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001874:	461a      	mov	r2, r3
 8001876:	2340      	movs	r3, #64	; 0x40
 8001878:	6093      	str	r3, [r2, #8]
}
 800187a:	e254      	b.n	8001d26 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	015a      	lsls	r2, r3, #5
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	4413      	add	r3, r2
 8001884:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	2b08      	cmp	r3, #8
 8001890:	d11a      	bne.n	80018c8 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	015a      	lsls	r2, r3, #5
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	4413      	add	r3, r2
 800189a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800189e:	461a      	mov	r2, r3
 80018a0:	2308      	movs	r3, #8
 80018a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	212c      	movs	r1, #44	; 0x2c
 80018aa:	fb01 f303 	mul.w	r3, r1, r3
 80018ae:	4413      	add	r3, r2
 80018b0:	3361      	adds	r3, #97	; 0x61
 80018b2:	2205      	movs	r2, #5
 80018b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	697a      	ldr	r2, [r7, #20]
 80018bc:	b2d2      	uxtb	r2, r2
 80018be:	4611      	mov	r1, r2
 80018c0:	4618      	mov	r0, r3
 80018c2:	f000 fe11 	bl	80024e8 <USB_HC_Halt>
}
 80018c6:	e22e      	b.n	8001d26 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	015a      	lsls	r2, r3, #5
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	4413      	add	r3, r2
 80018d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f003 0310 	and.w	r3, r3, #16
 80018da:	2b10      	cmp	r3, #16
 80018dc:	d140      	bne.n	8001960 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	212c      	movs	r1, #44	; 0x2c
 80018e4:	fb01 f303 	mul.w	r3, r1, r3
 80018e8:	4413      	add	r3, r2
 80018ea:	335c      	adds	r3, #92	; 0x5c
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	212c      	movs	r1, #44	; 0x2c
 80018f6:	fb01 f303 	mul.w	r3, r1, r3
 80018fa:	4413      	add	r3, r2
 80018fc:	3361      	adds	r3, #97	; 0x61
 80018fe:	2203      	movs	r2, #3
 8001900:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	212c      	movs	r1, #44	; 0x2c
 8001908:	fb01 f303 	mul.w	r3, r1, r3
 800190c:	4413      	add	r3, r2
 800190e:	333d      	adds	r3, #61	; 0x3d
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d112      	bne.n	800193c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	212c      	movs	r1, #44	; 0x2c
 800191c:	fb01 f303 	mul.w	r3, r1, r3
 8001920:	4413      	add	r3, r2
 8001922:	333c      	adds	r3, #60	; 0x3c
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d108      	bne.n	800193c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	212c      	movs	r1, #44	; 0x2c
 8001930:	fb01 f303 	mul.w	r3, r1, r3
 8001934:	4413      	add	r3, r2
 8001936:	333d      	adds	r3, #61	; 0x3d
 8001938:	2201      	movs	r2, #1
 800193a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	697a      	ldr	r2, [r7, #20]
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	4611      	mov	r1, r2
 8001946:	4618      	mov	r0, r3
 8001948:	f000 fdce 	bl	80024e8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	015a      	lsls	r2, r3, #5
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	4413      	add	r3, r2
 8001954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001958:	461a      	mov	r2, r3
 800195a:	2310      	movs	r3, #16
 800195c:	6093      	str	r3, [r2, #8]
}
 800195e:	e1e2      	b.n	8001d26 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	015a      	lsls	r2, r3, #5
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	4413      	add	r3, r2
 8001968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001972:	2b80      	cmp	r3, #128	; 0x80
 8001974:	d164      	bne.n	8001a40 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	691b      	ldr	r3, [r3, #16]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d111      	bne.n	80019a2 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	212c      	movs	r1, #44	; 0x2c
 8001984:	fb01 f303 	mul.w	r3, r1, r3
 8001988:	4413      	add	r3, r2
 800198a:	3361      	adds	r3, #97	; 0x61
 800198c:	2206      	movs	r2, #6
 800198e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	697a      	ldr	r2, [r7, #20]
 8001996:	b2d2      	uxtb	r2, r2
 8001998:	4611      	mov	r1, r2
 800199a:	4618      	mov	r0, r3
 800199c:	f000 fda4 	bl	80024e8 <USB_HC_Halt>
 80019a0:	e044      	b.n	8001a2c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	212c      	movs	r1, #44	; 0x2c
 80019a8:	fb01 f303 	mul.w	r3, r1, r3
 80019ac:	4413      	add	r3, r2
 80019ae:	335c      	adds	r3, #92	; 0x5c
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	1c5a      	adds	r2, r3, #1
 80019b4:	6879      	ldr	r1, [r7, #4]
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	202c      	movs	r0, #44	; 0x2c
 80019ba:	fb00 f303 	mul.w	r3, r0, r3
 80019be:	440b      	add	r3, r1
 80019c0:	335c      	adds	r3, #92	; 0x5c
 80019c2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	212c      	movs	r1, #44	; 0x2c
 80019ca:	fb01 f303 	mul.w	r3, r1, r3
 80019ce:	4413      	add	r3, r2
 80019d0:	335c      	adds	r3, #92	; 0x5c
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d920      	bls.n	8001a1a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	212c      	movs	r1, #44	; 0x2c
 80019de:	fb01 f303 	mul.w	r3, r1, r3
 80019e2:	4413      	add	r3, r2
 80019e4:	335c      	adds	r3, #92	; 0x5c
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	212c      	movs	r1, #44	; 0x2c
 80019f0:	fb01 f303 	mul.w	r3, r1, r3
 80019f4:	4413      	add	r3, r2
 80019f6:	3360      	adds	r3, #96	; 0x60
 80019f8:	2204      	movs	r2, #4
 80019fa:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	b2d9      	uxtb	r1, r3
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	202c      	movs	r0, #44	; 0x2c
 8001a06:	fb00 f303 	mul.w	r3, r0, r3
 8001a0a:	4413      	add	r3, r2
 8001a0c:	3360      	adds	r3, #96	; 0x60
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	461a      	mov	r2, r3
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 ffbf 	bl	8002996 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001a18:	e008      	b.n	8001a2c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	212c      	movs	r1, #44	; 0x2c
 8001a20:	fb01 f303 	mul.w	r3, r1, r3
 8001a24:	4413      	add	r3, r2
 8001a26:	3360      	adds	r3, #96	; 0x60
 8001a28:	2202      	movs	r2, #2
 8001a2a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	015a      	lsls	r2, r3, #5
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	4413      	add	r3, r2
 8001a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a38:	461a      	mov	r2, r3
 8001a3a:	2380      	movs	r3, #128	; 0x80
 8001a3c:	6093      	str	r3, [r2, #8]
}
 8001a3e:	e172      	b.n	8001d26 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	015a      	lsls	r2, r3, #5
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	4413      	add	r3, r2
 8001a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a56:	d11b      	bne.n	8001a90 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	212c      	movs	r1, #44	; 0x2c
 8001a5e:	fb01 f303 	mul.w	r3, r1, r3
 8001a62:	4413      	add	r3, r2
 8001a64:	3361      	adds	r3, #97	; 0x61
 8001a66:	2208      	movs	r2, #8
 8001a68:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	697a      	ldr	r2, [r7, #20]
 8001a70:	b2d2      	uxtb	r2, r2
 8001a72:	4611      	mov	r1, r2
 8001a74:	4618      	mov	r0, r3
 8001a76:	f000 fd37 	bl	80024e8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	015a      	lsls	r2, r3, #5
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	4413      	add	r3, r2
 8001a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a86:	461a      	mov	r2, r3
 8001a88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a8c:	6093      	str	r3, [r2, #8]
}
 8001a8e:	e14a      	b.n	8001d26 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	015a      	lsls	r2, r3, #5
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	4413      	add	r3, r2
 8001a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	f040 813f 	bne.w	8001d26 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	212c      	movs	r1, #44	; 0x2c
 8001aae:	fb01 f303 	mul.w	r3, r1, r3
 8001ab2:	4413      	add	r3, r2
 8001ab4:	3361      	adds	r3, #97	; 0x61
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d17d      	bne.n	8001bb8 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	212c      	movs	r1, #44	; 0x2c
 8001ac2:	fb01 f303 	mul.w	r3, r1, r3
 8001ac6:	4413      	add	r3, r2
 8001ac8:	3360      	adds	r3, #96	; 0x60
 8001aca:	2201      	movs	r2, #1
 8001acc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	212c      	movs	r1, #44	; 0x2c
 8001ad4:	fb01 f303 	mul.w	r3, r1, r3
 8001ad8:	4413      	add	r3, r2
 8001ada:	333f      	adds	r3, #63	; 0x3f
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d00a      	beq.n	8001af8 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	212c      	movs	r1, #44	; 0x2c
 8001ae8:	fb01 f303 	mul.w	r3, r1, r3
 8001aec:	4413      	add	r3, r2
 8001aee:	333f      	adds	r3, #63	; 0x3f
 8001af0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001af2:	2b03      	cmp	r3, #3
 8001af4:	f040 8100 	bne.w	8001cf8 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	691b      	ldr	r3, [r3, #16]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d113      	bne.n	8001b28 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	212c      	movs	r1, #44	; 0x2c
 8001b06:	fb01 f303 	mul.w	r3, r1, r3
 8001b0a:	4413      	add	r3, r2
 8001b0c:	3355      	adds	r3, #85	; 0x55
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	f083 0301 	eor.w	r3, r3, #1
 8001b14:	b2d8      	uxtb	r0, r3
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	212c      	movs	r1, #44	; 0x2c
 8001b1c:	fb01 f303 	mul.w	r3, r1, r3
 8001b20:	4413      	add	r3, r2
 8001b22:	3355      	adds	r3, #85	; 0x55
 8001b24:	4602      	mov	r2, r0
 8001b26:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	f040 80e3 	bne.w	8001cf8 <HCD_HC_OUT_IRQHandler+0x69c>
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	212c      	movs	r1, #44	; 0x2c
 8001b38:	fb01 f303 	mul.w	r3, r1, r3
 8001b3c:	4413      	add	r3, r2
 8001b3e:	334c      	adds	r3, #76	; 0x4c
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f000 80d8 	beq.w	8001cf8 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	212c      	movs	r1, #44	; 0x2c
 8001b4e:	fb01 f303 	mul.w	r3, r1, r3
 8001b52:	4413      	add	r3, r2
 8001b54:	334c      	adds	r3, #76	; 0x4c
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6879      	ldr	r1, [r7, #4]
 8001b5a:	697a      	ldr	r2, [r7, #20]
 8001b5c:	202c      	movs	r0, #44	; 0x2c
 8001b5e:	fb00 f202 	mul.w	r2, r0, r2
 8001b62:	440a      	add	r2, r1
 8001b64:	3240      	adds	r2, #64	; 0x40
 8001b66:	8812      	ldrh	r2, [r2, #0]
 8001b68:	4413      	add	r3, r2
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	6879      	ldr	r1, [r7, #4]
 8001b6e:	697a      	ldr	r2, [r7, #20]
 8001b70:	202c      	movs	r0, #44	; 0x2c
 8001b72:	fb00 f202 	mul.w	r2, r0, r2
 8001b76:	440a      	add	r2, r1
 8001b78:	3240      	adds	r2, #64	; 0x40
 8001b7a:	8812      	ldrh	r2, [r2, #0]
 8001b7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b80:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	f000 80b5 	beq.w	8001cf8 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	212c      	movs	r1, #44	; 0x2c
 8001b94:	fb01 f303 	mul.w	r3, r1, r3
 8001b98:	4413      	add	r3, r2
 8001b9a:	3355      	adds	r3, #85	; 0x55
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	f083 0301 	eor.w	r3, r3, #1
 8001ba2:	b2d8      	uxtb	r0, r3
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	212c      	movs	r1, #44	; 0x2c
 8001baa:	fb01 f303 	mul.w	r3, r1, r3
 8001bae:	4413      	add	r3, r2
 8001bb0:	3355      	adds	r3, #85	; 0x55
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	701a      	strb	r2, [r3, #0]
 8001bb6:	e09f      	b.n	8001cf8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	212c      	movs	r1, #44	; 0x2c
 8001bbe:	fb01 f303 	mul.w	r3, r1, r3
 8001bc2:	4413      	add	r3, r2
 8001bc4:	3361      	adds	r3, #97	; 0x61
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b03      	cmp	r3, #3
 8001bca:	d109      	bne.n	8001be0 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	212c      	movs	r1, #44	; 0x2c
 8001bd2:	fb01 f303 	mul.w	r3, r1, r3
 8001bd6:	4413      	add	r3, r2
 8001bd8:	3360      	adds	r3, #96	; 0x60
 8001bda:	2202      	movs	r2, #2
 8001bdc:	701a      	strb	r2, [r3, #0]
 8001bde:	e08b      	b.n	8001cf8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	212c      	movs	r1, #44	; 0x2c
 8001be6:	fb01 f303 	mul.w	r3, r1, r3
 8001bea:	4413      	add	r3, r2
 8001bec:	3361      	adds	r3, #97	; 0x61
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b04      	cmp	r3, #4
 8001bf2:	d109      	bne.n	8001c08 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	212c      	movs	r1, #44	; 0x2c
 8001bfa:	fb01 f303 	mul.w	r3, r1, r3
 8001bfe:	4413      	add	r3, r2
 8001c00:	3360      	adds	r3, #96	; 0x60
 8001c02:	2202      	movs	r2, #2
 8001c04:	701a      	strb	r2, [r3, #0]
 8001c06:	e077      	b.n	8001cf8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	212c      	movs	r1, #44	; 0x2c
 8001c0e:	fb01 f303 	mul.w	r3, r1, r3
 8001c12:	4413      	add	r3, r2
 8001c14:	3361      	adds	r3, #97	; 0x61
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2b05      	cmp	r3, #5
 8001c1a:	d109      	bne.n	8001c30 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	212c      	movs	r1, #44	; 0x2c
 8001c22:	fb01 f303 	mul.w	r3, r1, r3
 8001c26:	4413      	add	r3, r2
 8001c28:	3360      	adds	r3, #96	; 0x60
 8001c2a:	2205      	movs	r2, #5
 8001c2c:	701a      	strb	r2, [r3, #0]
 8001c2e:	e063      	b.n	8001cf8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	212c      	movs	r1, #44	; 0x2c
 8001c36:	fb01 f303 	mul.w	r3, r1, r3
 8001c3a:	4413      	add	r3, r2
 8001c3c:	3361      	adds	r3, #97	; 0x61
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b06      	cmp	r3, #6
 8001c42:	d009      	beq.n	8001c58 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	212c      	movs	r1, #44	; 0x2c
 8001c4a:	fb01 f303 	mul.w	r3, r1, r3
 8001c4e:	4413      	add	r3, r2
 8001c50:	3361      	adds	r3, #97	; 0x61
 8001c52:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001c54:	2b08      	cmp	r3, #8
 8001c56:	d14f      	bne.n	8001cf8 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	212c      	movs	r1, #44	; 0x2c
 8001c5e:	fb01 f303 	mul.w	r3, r1, r3
 8001c62:	4413      	add	r3, r2
 8001c64:	335c      	adds	r3, #92	; 0x5c
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	1c5a      	adds	r2, r3, #1
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	202c      	movs	r0, #44	; 0x2c
 8001c70:	fb00 f303 	mul.w	r3, r0, r3
 8001c74:	440b      	add	r3, r1
 8001c76:	335c      	adds	r3, #92	; 0x5c
 8001c78:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	212c      	movs	r1, #44	; 0x2c
 8001c80:	fb01 f303 	mul.w	r3, r1, r3
 8001c84:	4413      	add	r3, r2
 8001c86:	335c      	adds	r3, #92	; 0x5c
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d912      	bls.n	8001cb4 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	212c      	movs	r1, #44	; 0x2c
 8001c94:	fb01 f303 	mul.w	r3, r1, r3
 8001c98:	4413      	add	r3, r2
 8001c9a:	335c      	adds	r3, #92	; 0x5c
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	212c      	movs	r1, #44	; 0x2c
 8001ca6:	fb01 f303 	mul.w	r3, r1, r3
 8001caa:	4413      	add	r3, r2
 8001cac:	3360      	adds	r3, #96	; 0x60
 8001cae:	2204      	movs	r2, #4
 8001cb0:	701a      	strb	r2, [r3, #0]
 8001cb2:	e021      	b.n	8001cf8 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	212c      	movs	r1, #44	; 0x2c
 8001cba:	fb01 f303 	mul.w	r3, r1, r3
 8001cbe:	4413      	add	r3, r2
 8001cc0:	3360      	adds	r3, #96	; 0x60
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	015a      	lsls	r2, r3, #5
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	4413      	add	r3, r2
 8001cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001cdc:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001ce4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	015a      	lsls	r2, r3, #5
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	4413      	add	r3, r2
 8001cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	015a      	lsls	r2, r3, #5
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	4413      	add	r3, r2
 8001d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d04:	461a      	mov	r2, r3
 8001d06:	2302      	movs	r3, #2
 8001d08:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	b2d9      	uxtb	r1, r3
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	202c      	movs	r0, #44	; 0x2c
 8001d14:	fb00 f303 	mul.w	r3, r0, r3
 8001d18:	4413      	add	r3, r2
 8001d1a:	3360      	adds	r3, #96	; 0x60
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 fe38 	bl	8002996 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001d26:	bf00      	nop
 8001d28:	3720      	adds	r7, #32
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b08a      	sub	sp, #40	; 0x28
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6a1b      	ldr	r3, [r3, #32]
 8001d46:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f003 030f 	and.w	r3, r3, #15
 8001d4e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	0c5b      	lsrs	r3, r3, #17
 8001d54:	f003 030f 	and.w	r3, r3, #15
 8001d58:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	091b      	lsrs	r3, r3, #4
 8001d5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d62:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d004      	beq.n	8001d74 <HCD_RXQLVL_IRQHandler+0x46>
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	2b05      	cmp	r3, #5
 8001d6e:	f000 80a9 	beq.w	8001ec4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8001d72:	e0aa      	b.n	8001eca <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f000 80a6 	beq.w	8001ec8 <HCD_RXQLVL_IRQHandler+0x19a>
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	212c      	movs	r1, #44	; 0x2c
 8001d82:	fb01 f303 	mul.w	r3, r1, r3
 8001d86:	4413      	add	r3, r2
 8001d88:	3344      	adds	r3, #68	; 0x44
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f000 809b 	beq.w	8001ec8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	212c      	movs	r1, #44	; 0x2c
 8001d98:	fb01 f303 	mul.w	r3, r1, r3
 8001d9c:	4413      	add	r3, r2
 8001d9e:	3350      	adds	r3, #80	; 0x50
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	441a      	add	r2, r3
 8001da6:	6879      	ldr	r1, [r7, #4]
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	202c      	movs	r0, #44	; 0x2c
 8001dac:	fb00 f303 	mul.w	r3, r0, r3
 8001db0:	440b      	add	r3, r1
 8001db2:	334c      	adds	r3, #76	; 0x4c
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d87a      	bhi.n	8001eb0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6818      	ldr	r0, [r3, #0]
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	212c      	movs	r1, #44	; 0x2c
 8001dc4:	fb01 f303 	mul.w	r3, r1, r3
 8001dc8:	4413      	add	r3, r2
 8001dca:	3344      	adds	r3, #68	; 0x44
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	b292      	uxth	r2, r2
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	f000 fac4 	bl	8002360 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	212c      	movs	r1, #44	; 0x2c
 8001dde:	fb01 f303 	mul.w	r3, r1, r3
 8001de2:	4413      	add	r3, r2
 8001de4:	3344      	adds	r3, #68	; 0x44
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	441a      	add	r2, r3
 8001dec:	6879      	ldr	r1, [r7, #4]
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	202c      	movs	r0, #44	; 0x2c
 8001df2:	fb00 f303 	mul.w	r3, r0, r3
 8001df6:	440b      	add	r3, r1
 8001df8:	3344      	adds	r3, #68	; 0x44
 8001dfa:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	212c      	movs	r1, #44	; 0x2c
 8001e02:	fb01 f303 	mul.w	r3, r1, r3
 8001e06:	4413      	add	r3, r2
 8001e08:	3350      	adds	r3, #80	; 0x50
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	441a      	add	r2, r3
 8001e10:	6879      	ldr	r1, [r7, #4]
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	202c      	movs	r0, #44	; 0x2c
 8001e16:	fb00 f303 	mul.w	r3, r0, r3
 8001e1a:	440b      	add	r3, r1
 8001e1c:	3350      	adds	r3, #80	; 0x50
 8001e1e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	015a      	lsls	r2, r3, #5
 8001e24:	6a3b      	ldr	r3, [r7, #32]
 8001e26:	4413      	add	r3, r2
 8001e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	0cdb      	lsrs	r3, r3, #19
 8001e30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e34:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	212c      	movs	r1, #44	; 0x2c
 8001e3c:	fb01 f303 	mul.w	r3, r1, r3
 8001e40:	4413      	add	r3, r2
 8001e42:	3340      	adds	r3, #64	; 0x40
 8001e44:	881b      	ldrh	r3, [r3, #0]
 8001e46:	461a      	mov	r2, r3
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d13c      	bne.n	8001ec8 <HCD_RXQLVL_IRQHandler+0x19a>
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d039      	beq.n	8001ec8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	015a      	lsls	r2, r3, #5
 8001e58:	6a3b      	ldr	r3, [r7, #32]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001e6a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e72:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	015a      	lsls	r2, r3, #5
 8001e78:	6a3b      	ldr	r3, [r7, #32]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e80:	461a      	mov	r2, r3
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	212c      	movs	r1, #44	; 0x2c
 8001e8c:	fb01 f303 	mul.w	r3, r1, r3
 8001e90:	4413      	add	r3, r2
 8001e92:	3354      	adds	r3, #84	; 0x54
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	f083 0301 	eor.w	r3, r3, #1
 8001e9a:	b2d8      	uxtb	r0, r3
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	212c      	movs	r1, #44	; 0x2c
 8001ea2:	fb01 f303 	mul.w	r3, r1, r3
 8001ea6:	4413      	add	r3, r2
 8001ea8:	3354      	adds	r3, #84	; 0x54
 8001eaa:	4602      	mov	r2, r0
 8001eac:	701a      	strb	r2, [r3, #0]
      break;
 8001eae:	e00b      	b.n	8001ec8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	212c      	movs	r1, #44	; 0x2c
 8001eb6:	fb01 f303 	mul.w	r3, r1, r3
 8001eba:	4413      	add	r3, r2
 8001ebc:	3360      	adds	r3, #96	; 0x60
 8001ebe:	2204      	movs	r2, #4
 8001ec0:	701a      	strb	r2, [r3, #0]
      break;
 8001ec2:	e001      	b.n	8001ec8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8001ec4:	bf00      	nop
 8001ec6:	e000      	b.n	8001eca <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8001ec8:	bf00      	nop
  }
}
 8001eca:	bf00      	nop
 8001ecc:	3728      	adds	r7, #40	; 0x28
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b086      	sub	sp, #24
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001efe:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d10b      	bne.n	8001f22 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d102      	bne.n	8001f1a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 fd22 	bl	800295e <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	f043 0302 	orr.w	r3, r3, #2
 8001f20:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f003 0308 	and.w	r3, r3, #8
 8001f28:	2b08      	cmp	r3, #8
 8001f2a:	d132      	bne.n	8001f92 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	f043 0308 	orr.w	r3, r3, #8
 8001f32:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f003 0304 	and.w	r3, r3, #4
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	d126      	bne.n	8001f8c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d113      	bne.n	8001f6e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8001f4c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001f50:	d106      	bne.n	8001f60 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2102      	movs	r1, #2
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f000 fa7a 	bl	8002452 <USB_InitFSLSPClkSel>
 8001f5e:	e011      	b.n	8001f84 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2101      	movs	r1, #1
 8001f66:	4618      	mov	r0, r3
 8001f68:	f000 fa73 	bl	8002452 <USB_InitFSLSPClkSel>
 8001f6c:	e00a      	b.n	8001f84 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d106      	bne.n	8001f84 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8001f82:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f000 fd14 	bl	80029b2 <HAL_HCD_PortEnabled_Callback>
 8001f8a:	e002      	b.n	8001f92 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 fd1e 	bl	80029ce <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f003 0320 	and.w	r3, r3, #32
 8001f98:	2b20      	cmp	r3, #32
 8001f9a:	d103      	bne.n	8001fa4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	f043 0320 	orr.w	r3, r3, #32
 8001fa2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001faa:	461a      	mov	r2, r3
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	6013      	str	r3, [r2, #0]
}
 8001fb0:	bf00      	nop
 8001fb2:	3718      	adds	r7, #24
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d122      	bne.n	8002014 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d11b      	bne.n	8002014 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f06f 0202 	mvn.w	r2, #2
 8001fe4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	f003 0303 	and.w	r3, r3, #3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 f8f8 	bl	80021f0 <HAL_TIM_IC_CaptureCallback>
 8002000:	e005      	b.n	800200e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f8ea 	bl	80021dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f000 f8fb 	bl	8002204 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	f003 0304 	and.w	r3, r3, #4
 800201e:	2b04      	cmp	r3, #4
 8002020:	d122      	bne.n	8002068 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b04      	cmp	r3, #4
 800202e:	d11b      	bne.n	8002068 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f06f 0204 	mvn.w	r2, #4
 8002038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2202      	movs	r2, #2
 800203e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 f8ce 	bl	80021f0 <HAL_TIM_IC_CaptureCallback>
 8002054:	e005      	b.n	8002062 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 f8c0 	bl	80021dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 f8d1 	bl	8002204 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	f003 0308 	and.w	r3, r3, #8
 8002072:	2b08      	cmp	r3, #8
 8002074:	d122      	bne.n	80020bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	f003 0308 	and.w	r3, r3, #8
 8002080:	2b08      	cmp	r3, #8
 8002082:	d11b      	bne.n	80020bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f06f 0208 	mvn.w	r2, #8
 800208c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2204      	movs	r2, #4
 8002092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	f003 0303 	and.w	r3, r3, #3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d003      	beq.n	80020aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 f8a4 	bl	80021f0 <HAL_TIM_IC_CaptureCallback>
 80020a8:	e005      	b.n	80020b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 f896 	bl	80021dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f000 f8a7 	bl	8002204 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	f003 0310 	and.w	r3, r3, #16
 80020c6:	2b10      	cmp	r3, #16
 80020c8:	d122      	bne.n	8002110 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	f003 0310 	and.w	r3, r3, #16
 80020d4:	2b10      	cmp	r3, #16
 80020d6:	d11b      	bne.n	8002110 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f06f 0210 	mvn.w	r2, #16
 80020e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2208      	movs	r2, #8
 80020e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f87a 	bl	80021f0 <HAL_TIM_IC_CaptureCallback>
 80020fc:	e005      	b.n	800210a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 f86c 	bl	80021dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f000 f87d 	bl	8002204 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b01      	cmp	r3, #1
 800211c:	d10e      	bne.n	800213c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	f003 0301 	and.w	r3, r3, #1
 8002128:	2b01      	cmp	r3, #1
 800212a:	d107      	bne.n	800213c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f06f 0201 	mvn.w	r2, #1
 8002134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 f846 	bl	80021c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002146:	2b80      	cmp	r3, #128	; 0x80
 8002148:	d10e      	bne.n	8002168 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002154:	2b80      	cmp	r3, #128	; 0x80
 8002156:	d107      	bne.n	8002168 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f86c 	bl	8002240 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002172:	2b40      	cmp	r3, #64	; 0x40
 8002174:	d10e      	bne.n	8002194 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002180:	2b40      	cmp	r3, #64	; 0x40
 8002182:	d107      	bne.n	8002194 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800218c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 f842 	bl	8002218 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	f003 0320 	and.w	r3, r3, #32
 800219e:	2b20      	cmp	r3, #32
 80021a0:	d10e      	bne.n	80021c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	f003 0320 	and.w	r3, r3, #32
 80021ac:	2b20      	cmp	r3, #32
 80021ae:	d107      	bne.n	80021c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f06f 0220 	mvn.w	r2, #32
 80021b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 f836 	bl	800222c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021c0:	bf00      	nop
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f043 0201 	orr.w	r2, r3, #1
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr

08002276 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002276:	b480      	push	{r7}
 8002278:	b083      	sub	sp, #12
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f023 0201 	bic.w	r2, r3, #1
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80022a2:	2300      	movs	r3, #0
 80022a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	3301      	adds	r3, #1
 80022aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	4a13      	ldr	r2, [pc, #76]	; (80022fc <USB_FlushTxFifo+0x64>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d901      	bls.n	80022b8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e01b      	b.n	80022f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	daf2      	bge.n	80022a6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80022c0:	2300      	movs	r3, #0
 80022c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	019b      	lsls	r3, r3, #6
 80022c8:	f043 0220 	orr.w	r2, r3, #32
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	3301      	adds	r3, #1
 80022d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	4a08      	ldr	r2, [pc, #32]	; (80022fc <USB_FlushTxFifo+0x64>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d901      	bls.n	80022e2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e006      	b.n	80022f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	f003 0320 	and.w	r3, r3, #32
 80022ea:	2b20      	cmp	r3, #32
 80022ec:	d0f0      	beq.n	80022d0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3714      	adds	r7, #20
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	00030d40 	.word	0x00030d40

08002300 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002308:	2300      	movs	r3, #0
 800230a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	3301      	adds	r3, #1
 8002310:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	4a11      	ldr	r2, [pc, #68]	; (800235c <USB_FlushRxFifo+0x5c>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d901      	bls.n	800231e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e018      	b.n	8002350 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	2b00      	cmp	r3, #0
 8002324:	daf2      	bge.n	800230c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8002326:	2300      	movs	r3, #0
 8002328:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2210      	movs	r2, #16
 800232e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	3301      	adds	r3, #1
 8002334:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	4a08      	ldr	r2, [pc, #32]	; (800235c <USB_FlushRxFifo+0x5c>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d901      	bls.n	8002342 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e006      	b.n	8002350 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	f003 0310 	and.w	r3, r3, #16
 800234a:	2b10      	cmp	r3, #16
 800234c:	d0f0      	beq.n	8002330 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	00030d40 	.word	0x00030d40

08002360 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8002360:	b480      	push	{r7}
 8002362:	b08b      	sub	sp, #44	; 0x2c
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	4613      	mov	r3, r2
 800236c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8002376:	88fb      	ldrh	r3, [r7, #6]
 8002378:	089b      	lsrs	r3, r3, #2
 800237a:	b29b      	uxth	r3, r3
 800237c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800237e:	88fb      	ldrh	r3, [r7, #6]
 8002380:	f003 0303 	and.w	r3, r3, #3
 8002384:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8002386:	2300      	movs	r3, #0
 8002388:	623b      	str	r3, [r7, #32]
 800238a:	e014      	b.n	80023b6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002396:	601a      	str	r2, [r3, #0]
    pDest++;
 8002398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239a:	3301      	adds	r3, #1
 800239c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	3301      	adds	r3, #1
 80023a2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80023a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a6:	3301      	adds	r3, #1
 80023a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	3301      	adds	r3, #1
 80023ae:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80023b0:	6a3b      	ldr	r3, [r7, #32]
 80023b2:	3301      	adds	r3, #1
 80023b4:	623b      	str	r3, [r7, #32]
 80023b6:	6a3a      	ldr	r2, [r7, #32]
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d3e6      	bcc.n	800238c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80023be:	8bfb      	ldrh	r3, [r7, #30]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d01e      	beq.n	8002402 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80023c4:	2300      	movs	r3, #0
 80023c6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ce:	461a      	mov	r2, r3
 80023d0:	f107 0310 	add.w	r3, r7, #16
 80023d4:	6812      	ldr	r2, [r2, #0]
 80023d6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	6a3b      	ldr	r3, [r7, #32]
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	fa22 f303 	lsr.w	r3, r2, r3
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e8:	701a      	strb	r2, [r3, #0]
      i++;
 80023ea:	6a3b      	ldr	r3, [r7, #32]
 80023ec:	3301      	adds	r3, #1
 80023ee:	623b      	str	r3, [r7, #32]
      pDest++;
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	3301      	adds	r3, #1
 80023f4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80023f6:	8bfb      	ldrh	r3, [r7, #30]
 80023f8:	3b01      	subs	r3, #1
 80023fa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80023fc:	8bfb      	ldrh	r3, [r7, #30]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1ea      	bne.n	80023d8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002404:	4618      	mov	r0, r3
 8002406:	372c      	adds	r7, #44	; 0x2c
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	695b      	ldr	r3, [r3, #20]
 800241c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	4013      	ands	r3, r2
 8002426:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8002428:	68fb      	ldr	r3, [r7, #12]
}
 800242a:	4618      	mov	r0, r3
 800242c:	3714      	adds	r7, #20
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8002436:	b480      	push	{r7}
 8002438:	b083      	sub	sp, #12
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	f003 0301 	and.w	r3, r3, #1
}
 8002446:	4618      	mov	r0, r3
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8002452:	b480      	push	{r7}
 8002454:	b085      	sub	sp, #20
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
 800245a:	460b      	mov	r3, r1
 800245c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002470:	f023 0303 	bic.w	r3, r3, #3
 8002474:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	78fb      	ldrb	r3, [r7, #3]
 8002480:	f003 0303 	and.w	r3, r3, #3
 8002484:	68f9      	ldr	r1, [r7, #12]
 8002486:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800248a:	4313      	orrs	r3, r2
 800248c:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800248e:	78fb      	ldrb	r3, [r7, #3]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d107      	bne.n	80024a4 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800249a:	461a      	mov	r2, r3
 800249c:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80024a0:	6053      	str	r3, [r2, #4]
 80024a2:	e009      	b.n	80024b8 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80024a4:	78fb      	ldrb	r3, [r7, #3]
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d106      	bne.n	80024b8 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024b0:	461a      	mov	r2, r3
 80024b2:	f241 7370 	movw	r3, #6000	; 0x1770
 80024b6:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3714      	adds	r7, #20
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b085      	sub	sp, #20
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	b29b      	uxth	r3, r3
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3714      	adds	r7, #20
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b089      	sub	sp, #36	; 0x24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	460b      	mov	r3, r1
 80024f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80024f8:	78fb      	ldrb	r3, [r7, #3]
 80024fa:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	015a      	lsls	r2, r3, #5
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	4413      	add	r3, r2
 8002508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	0c9b      	lsrs	r3, r3, #18
 8002510:	f003 0303 	and.w	r3, r3, #3
 8002514:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	015a      	lsls	r2, r3, #5
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	4413      	add	r3, r2
 800251e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	0fdb      	lsrs	r3, r3, #31
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f003 0320 	and.w	r3, r3, #32
 8002534:	2b20      	cmp	r3, #32
 8002536:	d104      	bne.n	8002542 <USB_HC_Halt+0x5a>
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800253e:	2300      	movs	r3, #0
 8002540:	e0c8      	b.n	80026d4 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d002      	beq.n	800254e <USB_HC_Halt+0x66>
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	2b02      	cmp	r3, #2
 800254c:	d163      	bne.n	8002616 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	015a      	lsls	r2, r3, #5
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	4413      	add	r3, r2
 8002556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	0151      	lsls	r1, r2, #5
 8002560:	69fa      	ldr	r2, [r7, #28]
 8002562:	440a      	add	r2, r1
 8002564:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002568:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800256c:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f003 0320 	and.w	r3, r3, #32
 8002576:	2b00      	cmp	r3, #0
 8002578:	f040 80ab 	bne.w	80026d2 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002580:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d133      	bne.n	80025f0 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	015a      	lsls	r2, r3, #5
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	4413      	add	r3, r2
 8002590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	0151      	lsls	r1, r2, #5
 800259a:	69fa      	ldr	r2, [r7, #28]
 800259c:	440a      	add	r2, r1
 800259e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025a6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	015a      	lsls	r2, r3, #5
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	4413      	add	r3, r2
 80025b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	0151      	lsls	r1, r2, #5
 80025ba:	69fa      	ldr	r2, [r7, #28]
 80025bc:	440a      	add	r2, r1
 80025be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025c6:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	3301      	adds	r3, #1
 80025cc:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025d4:	d81d      	bhi.n	8002612 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	015a      	lsls	r2, r3, #5
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	4413      	add	r3, r2
 80025de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80025e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80025ec:	d0ec      	beq.n	80025c8 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80025ee:	e070      	b.n	80026d2 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	015a      	lsls	r2, r3, #5
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	4413      	add	r3, r2
 80025f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	0151      	lsls	r1, r2, #5
 8002602:	69fa      	ldr	r2, [r7, #28]
 8002604:	440a      	add	r2, r1
 8002606:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800260a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800260e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002610:	e05f      	b.n	80026d2 <USB_HC_Halt+0x1ea>
            break;
 8002612:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002614:	e05d      	b.n	80026d2 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	015a      	lsls	r2, r3, #5
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	4413      	add	r3, r2
 800261e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	0151      	lsls	r1, r2, #5
 8002628:	69fa      	ldr	r2, [r7, #28]
 800262a:	440a      	add	r2, r1
 800262c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002630:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002634:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d133      	bne.n	80026ae <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	015a      	lsls	r2, r3, #5
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	4413      	add	r3, r2
 800264e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	0151      	lsls	r1, r2, #5
 8002658:	69fa      	ldr	r2, [r7, #28]
 800265a:	440a      	add	r2, r1
 800265c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002660:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002664:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	015a      	lsls	r2, r3, #5
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	4413      	add	r3, r2
 800266e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	0151      	lsls	r1, r2, #5
 8002678:	69fa      	ldr	r2, [r7, #28]
 800267a:	440a      	add	r2, r1
 800267c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002680:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002684:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	3301      	adds	r3, #1
 800268a:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002692:	d81d      	bhi.n	80026d0 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	015a      	lsls	r2, r3, #5
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	4413      	add	r3, r2
 800269c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80026a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026aa:	d0ec      	beq.n	8002686 <USB_HC_Halt+0x19e>
 80026ac:	e011      	b.n	80026d2 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	015a      	lsls	r2, r3, #5
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	4413      	add	r3, r2
 80026b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	0151      	lsls	r1, r2, #5
 80026c0:	69fa      	ldr	r2, [r7, #28]
 80026c2:	440a      	add	r2, r1
 80026c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026cc:	6013      	str	r3, [r2, #0]
 80026ce:	e000      	b.n	80026d2 <USB_HC_Halt+0x1ea>
          break;
 80026d0:	bf00      	nop
    }
  }

  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3724      	adds	r7, #36	; 0x24
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b088      	sub	sp, #32
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80026e8:	2300      	movs	r3, #0
 80026ea:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80026f0:	2300      	movs	r3, #0
 80026f2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f7ff fdbe 	bl	8002276 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80026fa:	2110      	movs	r1, #16
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7ff fdcb 	bl	8002298 <USB_FlushTxFifo>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f7ff fdf7 	bl	8002300 <USB_FlushRxFifo>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800271c:	2300      	movs	r3, #0
 800271e:	61bb      	str	r3, [r7, #24]
 8002720:	e01f      	b.n	8002762 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	015a      	lsls	r2, r3, #5
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	4413      	add	r3, r2
 800272a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002738:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002740:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002748:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	015a      	lsls	r2, r3, #5
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	4413      	add	r3, r2
 8002752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002756:	461a      	mov	r2, r3
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	3301      	adds	r3, #1
 8002760:	61bb      	str	r3, [r7, #24]
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	2b0f      	cmp	r3, #15
 8002766:	d9dc      	bls.n	8002722 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8002768:	2300      	movs	r3, #0
 800276a:	61bb      	str	r3, [r7, #24]
 800276c:	e034      	b.n	80027d8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	015a      	lsls	r2, r3, #5
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	4413      	add	r3, r2
 8002776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002784:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800278c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002794:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	015a      	lsls	r2, r3, #5
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	4413      	add	r3, r2
 800279e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a2:	461a      	mov	r2, r3
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	3301      	adds	r3, #1
 80027ac:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027b4:	d80c      	bhi.n	80027d0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	015a      	lsls	r2, r3, #5
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	4413      	add	r3, r2
 80027be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80027c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027cc:	d0ec      	beq.n	80027a8 <USB_StopHost+0xc8>
 80027ce:	e000      	b.n	80027d2 <USB_StopHost+0xf2>
        break;
 80027d0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	3301      	adds	r3, #1
 80027d6:	61bb      	str	r3, [r7, #24]
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	2b0f      	cmp	r3, #15
 80027dc:	d9c7      	bls.n	800276e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027e4:	461a      	mov	r2, r3
 80027e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027ea:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027f2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f7ff fd2d 	bl	8002254 <USB_EnableGlobalInt>

  return ret;
 80027fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3720      	adds	r7, #32
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8002812:	1c5a      	adds	r2, r3, #1
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 f804 	bl	8002828 <USBH_HandleSof>
}
 8002820:	bf00      	nop
 8002822:	3708      	adds	r7, #8
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b0b      	cmp	r3, #11
 8002838:	d10a      	bne.n	8002850 <USBH_HandleSof+0x28>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8002840:	2b00      	cmp	r3, #0
 8002842:	d005      	beq.n	8002850 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	4798      	blx	r3
  }
}
 8002850:	bf00      	nop
 8002852:	3708      	adds	r7, #8
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8002868:	bf00      	nop
}
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8002884:	bf00      	nop
}
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b082      	sub	sp, #8
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 f883 	bl	80029ea <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	791b      	ldrb	r3, [r3, #4]
 80028e8:	4619      	mov	r1, r3
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 f80b 	bl	8002906 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	795b      	ldrb	r3, [r3, #5]
 80028f4:	4619      	mov	r1, r3
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 f805 	bl	8002906 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
 800290e:	460b      	mov	r3, r1
 8002910:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8002912:	78fb      	ldrb	r3, [r7, #3]
 8002914:	2b0f      	cmp	r3, #15
 8002916:	d80d      	bhi.n	8002934 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8002918:	78fb      	ldrb	r3, [r7, #3]
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	33e0      	adds	r3, #224	; 0xe0
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	4413      	add	r3, r2
 8002922:	685a      	ldr	r2, [r3, #4]
 8002924:	78fb      	ldrb	r3, [r7, #3]
 8002926:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	33e0      	adds	r3, #224	; 0xe0
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	440b      	add	r3, r1
 8002932:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr

08002942 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b082      	sub	sp, #8
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff ff57 	bl	8002804 <USBH_LL_IncTimer>
}
 8002956:	bf00      	nop
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b082      	sub	sp, #8
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff ff8f 	bl	8002890 <USBH_LL_Connect>
}
 8002972:	bf00      	nop
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b082      	sub	sp, #8
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff ff98 	bl	80028be <USBH_LL_Disconnect>
}
 800298e:	bf00      	nop
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
 800299e:	460b      	mov	r3, r1
 80029a0:	70fb      	strb	r3, [r7, #3]
 80029a2:	4613      	mov	r3, r2
 80029a4:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b082      	sub	sp, #8
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff ff49 	bl	8002858 <USBH_LL_PortEnabled>
}
 80029c6:	bf00      	nop
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b082      	sub	sp, #8
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff ff49 	bl	8002874 <USBH_LL_PortDisabled>
}
 80029e2:	bf00      	nop
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b084      	sub	sp, #16
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80029f2:	2300      	movs	r3, #0
 80029f4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80029f6:	2300      	movs	r3, #0
 80029f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7fe fab9 	bl	8000f78 <HAL_HCD_Stop>
 8002a06:	4603      	mov	r3, r0
 8002a08:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8002a0a:	7bfb      	ldrb	r3, [r7, #15]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f000 f807 	bl	8002a20 <USBH_Get_USB_Status>
 8002a12:	4603      	mov	r3, r0
 8002a14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8002a16:	7bbb      	ldrb	r3, [r7, #14]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8002a2e:	79fb      	ldrb	r3, [r7, #7]
 8002a30:	2b03      	cmp	r3, #3
 8002a32:	d817      	bhi.n	8002a64 <USBH_Get_USB_Status+0x44>
 8002a34:	a201      	add	r2, pc, #4	; (adr r2, 8002a3c <USBH_Get_USB_Status+0x1c>)
 8002a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a3a:	bf00      	nop
 8002a3c:	08002a4d 	.word	0x08002a4d
 8002a40:	08002a53 	.word	0x08002a53
 8002a44:	08002a59 	.word	0x08002a59
 8002a48:	08002a5f 	.word	0x08002a5f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	73fb      	strb	r3, [r7, #15]
    break;
 8002a50:	e00b      	b.n	8002a6a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8002a52:	2302      	movs	r3, #2
 8002a54:	73fb      	strb	r3, [r7, #15]
    break;
 8002a56:	e008      	b.n	8002a6a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	73fb      	strb	r3, [r7, #15]
    break;
 8002a5c:	e005      	b.n	8002a6a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8002a5e:	2302      	movs	r3, #2
 8002a60:	73fb      	strb	r3, [r7, #15]
    break;
 8002a62:	e002      	b.n	8002a6a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8002a64:	2302      	movs	r3, #2
 8002a66:	73fb      	strb	r3, [r7, #15]
    break;
 8002a68:	bf00      	nop
  }
  return usb_status;
 8002a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3714      	adds	r7, #20
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <__libc_init_array>:
 8002a78:	b570      	push	{r4, r5, r6, lr}
 8002a7a:	4d0d      	ldr	r5, [pc, #52]	; (8002ab0 <__libc_init_array+0x38>)
 8002a7c:	4c0d      	ldr	r4, [pc, #52]	; (8002ab4 <__libc_init_array+0x3c>)
 8002a7e:	1b64      	subs	r4, r4, r5
 8002a80:	10a4      	asrs	r4, r4, #2
 8002a82:	2600      	movs	r6, #0
 8002a84:	42a6      	cmp	r6, r4
 8002a86:	d109      	bne.n	8002a9c <__libc_init_array+0x24>
 8002a88:	4d0b      	ldr	r5, [pc, #44]	; (8002ab8 <__libc_init_array+0x40>)
 8002a8a:	4c0c      	ldr	r4, [pc, #48]	; (8002abc <__libc_init_array+0x44>)
 8002a8c:	f000 f818 	bl	8002ac0 <_init>
 8002a90:	1b64      	subs	r4, r4, r5
 8002a92:	10a4      	asrs	r4, r4, #2
 8002a94:	2600      	movs	r6, #0
 8002a96:	42a6      	cmp	r6, r4
 8002a98:	d105      	bne.n	8002aa6 <__libc_init_array+0x2e>
 8002a9a:	bd70      	pop	{r4, r5, r6, pc}
 8002a9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aa0:	4798      	blx	r3
 8002aa2:	3601      	adds	r6, #1
 8002aa4:	e7ee      	b.n	8002a84 <__libc_init_array+0xc>
 8002aa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aaa:	4798      	blx	r3
 8002aac:	3601      	adds	r6, #1
 8002aae:	e7f2      	b.n	8002a96 <__libc_init_array+0x1e>
 8002ab0:	08002ad8 	.word	0x08002ad8
 8002ab4:	08002ad8 	.word	0x08002ad8
 8002ab8:	08002ad8 	.word	0x08002ad8
 8002abc:	08002adc 	.word	0x08002adc

08002ac0 <_init>:
 8002ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ac2:	bf00      	nop
 8002ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ac6:	bc08      	pop	{r3}
 8002ac8:	469e      	mov	lr, r3
 8002aca:	4770      	bx	lr

08002acc <_fini>:
 8002acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ace:	bf00      	nop
 8002ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ad2:	bc08      	pop	{r3}
 8002ad4:	469e      	mov	lr, r3
 8002ad6:	4770      	bx	lr
